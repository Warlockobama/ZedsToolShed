{
  "vulnerabilities": [
    {
      "alert_id": "40003",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "113",
      "reference": "Scan Rule Help https://owasp.org/www-community/vulnerabilities/CRLF_Injection https://cwe.mitre.org/data/definitions/113.html",
      "description": "Cookie can be set via CRLF injection. It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.",
      "remediation": "Type check the submitted parameter carefully. Do not allow CRLF to be injected by filtering CRLF.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/CrlfInjectionScanRule.java"
      ],
      "alert_name": "CRLF Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/40003/",
      "canonical_id": "41778144-ec9c-5339-9a62-ee2e88c91cbf"
    },
    {
      "alert_id": "3-3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "598",
      "reference": "Scan Rule Help https://seclists.org/webappsec/2002/q4/111",
      "description": "A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.",
      "remediation": "This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java"
      ],
      "alert_name": "Referer Exposes Session ID",
      "source_url": "https://www.zaproxy.org/docs/alerts/3-3/",
      "canonical_id": "0aef9583-b949-53e2-b361-773f3f3761e9"
    },
    {
      "alert_id": "20016-1",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "264",
      "reference": "Scan Rule Help https://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v=vs.95) https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v=vs.95)",
      "description": "Flash/Silverlight based cross-site request forgery may be possible, due to a misconfiguration on the web server.",
      "remediation": "Configure the crossdomain.xml file to restrict the list of domains that are allowed to make cross-domain read requests to this web server, using <allow-access-from domain=\"example.com\">. You should only grant access to \"*\" (all domains) if you are certain that this service does not host any access-controlled, personalized, or private data.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CrossDomainScanRule.java"
      ],
      "alert_name": "Cross-Domain Misconfiguration - Adobe - Read",
      "source_url": "https://www.zaproxy.org/docs/alerts/20016-1/",
      "canonical_id": "0046fea3-038a-5803-a59f-470d948a9ebc"
    },
    {
      "alert_id": "10032-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "642",
      "reference": "Scan Rule Help",
      "description": "The following emails were found being serialized in the viewstate field:",
      "remediation": "Verify the provided information isn't confidential.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
      ],
      "alert_name": "Emails Found in the Viewstate",
      "source_url": "https://www.zaproxy.org/docs/alerts/10032-2/",
      "canonical_id": "28dd8ac9-db39-5efb-9527-2218e128130f"
    },
    {
      "alert_id": "10035-8",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "319",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc6797",
      "description": "A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.",
      "remediation": "Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with appropriate content.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Malformed Content (Non-compliant with Spec)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-8/",
      "canonical_id": "9daef9da-fdd9-52ed-965a-09fd29e414c4"
    },
    {
      "alert_id": "30002",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "134",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Format_string_attack",
      "description": "A Format String error occurs when the submitted data of an input string is evaluated as a command by the application.",
      "remediation": "Rewrite the background program using proper deletion of bad character strings. This will require a recompile of the background executable.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/FormatStringScanRule.java"
      ],
      "alert_name": "Format String Error",
      "source_url": "https://www.zaproxy.org/docs/alerts/30002/",
      "canonical_id": "7fae9838-1fd9-55ab-8ad5-c4b13fc551ce"
    },
    {
      "alert_id": "40008",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "472",
      "reference": "Scan Rule Help",
      "description": "Parameter manipulation caused an error page or Java stack trace to be displayed. This indicated lack of exception handling and potential areas for further exploit.",
      "remediation": "Identify the cause of the error and fix it. Do not trust client side input and enforce a tight check in the server side. Besides, catch the exception properly. Use a generic 500 error page for internal server error.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ParameterTamperScanRule.java"
      ],
      "alert_name": "Parameter Tampering",
      "source_url": "https://www.zaproxy.org/docs/alerts/40008/",
      "canonical_id": "1a6799d8-670e-59e1-bfb0-74201731f168"
    },
    {
      "alert_id": "90017",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "91",
      "reference": "Scan Rule Help https://www.contextis.com/blog/xslt-server-side-injection-attacks",
      "description": "Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.",
      "remediation": "Sanitize and analyze every user input coming from any client-side.",
      "gitsrc": [
        "https://www.contextis.com/blog/xslt-server-side-injection-attacks"
      ],
      "alert_name": "XSLT Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90017/",
      "canonical_id": "af8e3013-6a85-5996-abc6-5cc8e83a8a7d"
    },
    {
      "alert_id": "10057",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "284",
      "reference": "Scan Rule Help https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.html",
      "description": "A hash of a username (admin) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.",
      "remediation": "Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/UsernameIdorScanRule.java"
      ],
      "alert_name": "Username Hash Found",
      "source_url": "https://www.zaproxy.org/docs/alerts/10057/",
      "canonical_id": "67b5807d-5c79-5d53-9ed1-fd8d1b86044a"
    },
    {
      "alert_id": "100035",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Medium",
      "cweid": "209",
      "reference": "Scan Rule Help",
      "description": "A Java stack trace was found in the HTTP response body.",
      "remediation": "Catch and handle exceptions properly, avoiding the exposure of stack traces to users. Configure the web server or application framework to log stack traces instead of displaying them.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/JavaDisclosure.js"
      ],
      "alert_name": "Information Disclosure - Java Stack Trace",
      "source_url": "https://www.zaproxy.org/docs/alerts/100035/",
      "canonical_id": "eb5b99d9-eb10-5370-9eb4-f1b1da98c38c"
    },
    {
      "alert_id": "10095",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "530",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/530.html https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html",
      "description": "A backup of the file was disclosed by the web server.",
      "remediation": "Do not edit files in-situ on the web server, and ensure that un-necessary files (including hidden files) are removed from the web server.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/BackupFileDisclosureScanRule.java"
      ],
      "alert_name": "Backup File Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/10095/",
      "canonical_id": "4bf89e7b-2cb9-51ed-a98c-f011b358bbea"
    },
    {
      "alert_id": "90005-1",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site",
      "description": "Specifies the relationship between request initiator\u2019s origin and target\u2019s origin.",
      "remediation": "Ensure that Sec-Fetch-Site header is included in request headers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-Site Header is Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-1/",
      "canonical_id": "b10e3946-62ee-5f72-9d9e-15a2b7ef2173"
    },
    {
      "alert_id": "10055-10",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: script-src unsafe-eval",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-10/",
      "canonical_id": "8eea60be-b042-5a64-9d78-4cdd22fdfb7f"
    },
    {
      "alert_id": "10042",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "319",
      "reference": "Scan Rule Help",
      "description": "This check identifies secure HTTPS pages that host insecure HTTP forms. The issue is that a secure page is transitioning to an insecure page when data is uploaded through a form. The user may think they\u2019re submitting data to a secure page when in fact they are not.",
      "remediation": "Ensure sensitive data is only sent over secured HTTPS channels.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureFormPostScanRule.java"
      ],
      "alert_name": "HTTPS to HTTP Insecure Transition in Form Post",
      "source_url": "https://www.zaproxy.org/docs/alerts/10042/",
      "canonical_id": "ea5f19c8-0620-5f60-b092-c6d4c5504893"
    },
    {
      "alert_id": "10020-3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "1021",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc7034#section-4",
      "description": "An X-Frame-Options (XFO) META tag was found, defining XFO via a META tag is explicitly not supported by the spec (RFC 7034).",
      "remediation": "Ensure X-Frame-Options is set via a response header field. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/AntiClickjackingScanRule.java"
      ],
      "alert_name": "X-Frame-Options Defined via META (Non-compliant with Spec)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10020-3/",
      "canonical_id": "6c2f9479-6ae9-5fd0-b51b-02ee3ff87c55"
    },
    {
      "alert_id": "10039",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "497",
      "reference": "Scan Rule Help",
      "description": "The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XBackendServerInformationLeakScanRule.java"
      ],
      "alert_name": "X-Backend-Server Header Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/10039/",
      "canonical_id": "9c3ed423-c199-5b99-8b07-57b229169149"
    },
    {
      "alert_id": "90018",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "89",
      "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "A SQL injection may be possible using the attached payload",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the privilege of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/sqliplugin/src/main/java/org/zaproxy/zap/extension/sqliplugin/SQLInjectionScanRule.java"
      ],
      "alert_name": "Advanced SQL Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90018/",
      "canonical_id": "ae95ab22-766a-546f-9b4e-14008efb4404"
    },
    {
      "alert_id": "10055-4",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: Wildcard Directive",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-4/",
      "canonical_id": "13c8338c-3bb5-592d-92a2-3fcb748fb695"
    },
    {
      "alert_id": "10055-12",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: Header & Meta",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-12/",
      "canonical_id": "470dc6ae-5953-5dec-8ed8-c46b1cb4b85e"
    },
    {
      "alert_id": "100020",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "High",
      "cweid": "209",
      "reference": "Scan Rule Help",
      "description": "An SQL error was found in the HTTP response body.",
      "remediation": "Ensure proper sanitisation is done on the server side.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/SQL%20injection%20detection.js"
      ],
      "alert_name": "Information Disclosure - SQL Error",
      "source_url": "https://www.zaproxy.org/docs/alerts/100020/",
      "canonical_id": "de8f2381-f4ef-5db0-a5c6-5f46d40ce203"
    },
    {
      "alert_id": "90033",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "565",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc6265#section-4.1 https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_cookies",
      "description": "Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com , or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.",
      "remediation": "Always scope cookies to a FQDN (Fully Qualified Domain Name).",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java"
      ],
      "alert_name": "Loosely Scoped Cookie",
      "source_url": "https://www.zaproxy.org/docs/alerts/90033/",
      "canonical_id": "def74121-40ba-5dcc-be0f-515cbfe952b9"
    },
    {
      "alert_id": "20019-3",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "601",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/601.html",
      "description": "URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"https://www.example.com/\". Features such as the ESAPI AccessReferenceMap provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ExternalRedirectScanRule.java"
      ],
      "alert_name": "External Redirect",
      "source_url": "https://www.zaproxy.org/docs/alerts/20019-3/",
      "canonical_id": "4468d85f-f790-5e37-a9f3-b3e4c0c9f437"
    },
    {
      "alert_id": "10115",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/PolyfillCdnScriptScanRule.java"
      ],
      "alert_name": "Script Served From Malicious Domain (polyfill)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10115/",
      "canonical_id": "78a2f865-4a80-5f1f-8138-374ac6b77aa4"
    },
    {
      "alert_id": "10098",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "264",
      "reference": "Scan Rule Help https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy",
      "description": "Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.",
      "remediation": "Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance). Configure the \"Access-Control-Allow-Origin\" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CrossDomainMisconfigurationScanRule.java"
      ],
      "alert_name": "Cross-Domain Misconfiguration",
      "source_url": "https://www.zaproxy.org/docs/alerts/10098/",
      "canonical_id": "3f0b01bc-d848-50b2-af51-8ae2058c8fe8"
    },
    {
      "alert_id": "10105-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "287",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Brute_force_attack https://en.wikipedia.org/wiki/Digest_access_authentication",
      "description": "An insecure authentication mechanism is in use. This allows an attacker on the network access to the userid and password of the authenticated user. For Basic Authentication, the attacker must merely monitor the network traffic until a Basic Authentication request is received, and then base64 decode the username and password. For Digest Authentication, the attacker has access to the username, and possibly also the password, if the hash (including a nonce) can be successfully cracked, or if a Man-In-The-Middle attack is mounted.\nThe attacker eavesdrops on the network until an authentication has completed.",
      "remediation": "Use HTTPS, and use a secure authentication mechanism that does not transmit the userid or password in an un-encrypted fashion. In particular, avoid use of the Basic Authentication mechanism, since this trivial obfuscation mechanism is easily broken.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Brute_force_attack"
      ],
      "alert_name": "Authentication Credentials Captured",
      "source_url": "https://www.zaproxy.org/docs/alerts/10105-1/",
      "canonical_id": "ab43cd35-15d1-5631-9d6f-d21a0aef19d3"
    },
    {
      "alert_id": "110002",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "",
      "reference": "",
      "description": "A Base64-encoded string has been found in the websocket incoming message. Base64-encoded data may contain sensitive information such as usernames, passwords or cookies which should be further inspected. Decoded evidence: example.",
      "remediation": "Base64-encoding should not be used to store or send sensitive information.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Base64%20Disclosure.js"
      ],
      "alert_name": "Base64 Disclosure in WebSocket message",
      "source_url": "https://www.zaproxy.org/docs/alerts/110002/",
      "canonical_id": "67fc7afb-c9f2-5ebe-9267-99810ba93bce"
    },
    {
      "alert_id": "110003",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "200",
      "reference": "",
      "description": "The response appeared to contain common error messages returned by platforms such as ASP.NET, and Web-servers such as IIS and Apache. You can configure the list of common debug messages.",
      "remediation": "Disable debugging messages before pushing to production.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Debug%20Error%20Disclosure.js"
      ],
      "alert_name": "Information Disclosure - Debug Error Messages via WebSocket",
      "source_url": "https://www.zaproxy.org/docs/alerts/110003/",
      "canonical_id": "f22bc7a2-414d-5108-9a9d-496c8c887370"
    },
    {
      "alert_id": "10024",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "598",
      "reference": "Scan Rule Help",
      "description": "The request appeared to contain sensitive information leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.",
      "remediation": "Do not pass sensitive information in URIs.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InformationDisclosureInUrlScanRule.java"
      ],
      "alert_name": "Information Disclosure - Sensitive Information in URL",
      "source_url": "https://www.zaproxy.org/docs/alerts/10024/",
      "canonical_id": "3f14f108-ce24-52eb-941f-528d03a04642"
    },
    {
      "alert_id": "10035-4",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "319",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc6797#section-8.1",
      "description": "A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).",
      "remediation": "Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security for HTTPS responses.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Header on Plain HTTP Response",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-4/",
      "canonical_id": "04b72b37-75e3-5de2-aac0-2b02179ac309"
    },
    {
      "alert_id": "10106",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "311",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html https://letsencrypt.org/",
      "description": "The site is only served under HTTP and not HTTPS.",
      "remediation": "Configure your web or application server to use SSL (https).",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/HttpOnlySiteScanRule.java"
      ],
      "alert_name": "HTTP Only Site",
      "source_url": "https://www.zaproxy.org/docs/alerts/10106/",
      "canonical_id": "1f299495-cb9a-5e9b-8140-8037308e2831"
    },
    {
      "alert_id": "10010",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "1004",
      "reference": "Scan Rule Help https://owasp.org/www-community/HttpOnly",
      "description": "A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.",
      "remediation": "Ensure that the HttpOnly flag is set for all cookies.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieHttpOnlyScanRule.java"
      ],
      "alert_name": "Cookie No HttpOnly Flag",
      "source_url": "https://www.zaproxy.org/docs/alerts/10010/",
      "canonical_id": "4b5a1b01-94ab-536d-afe6-e775cd446c6f"
    },
    {
      "alert_id": "100013",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Medium",
      "cweid": "200",
      "reference": "Scan Rule Help",
      "description": "A private IP such as 10.x.x.x, 172.x.x.x, 192.168.x.x or IPV6 fe00:: has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.",
      "remediation": "Remove the private IP address from the HTTP response body. For comments, use JSP/ASP comment instead of HTML/JavaScript comment which can be seen by client browsers.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20Internal%20IPs.js"
      ],
      "alert_name": "Information Disclosure - Private IP Address",
      "source_url": "https://www.zaproxy.org/docs/alerts/100013/",
      "canonical_id": "d6851e51-b1fc-56e7-b390-9d4958faccbe"
    },
    {
      "alert_id": "10063",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/PermissionsPolicyScanRule.java"
      ],
      "alert_name": "Permissions Policy Header Not Set",
      "source_url": "https://www.zaproxy.org/docs/alerts/10063/",
      "canonical_id": "fc446679-63a1-5877-ac92-36e451bdeac6"
    },
    {
      "alert_id": "10046",
      "alert_type": "Passive",
      "status": "deprecated",
      "risk": "",
      "cweid": "",
      "reference": "",
      "description": "Based on passive analysis of the response, insecure component {0} {1} appears to be in use.\nThe highest noted CVSS rating for this product version is {2}.\nIn total, {3} vulnerabilities were noted.\nSome Linux distributions such as Red Hat employ the practice of retaining old version numbers when security fixes are \u201cbackported\u201d.\nThese cases are noted as \u201cFalse Positives\u201d, but should be manually verified. Deprecated: 2020-02-07 Replaced by the Retire rule which is actively maintained.",
      "remediation": "",
      "gitsrc": [
        "https://www.zaproxy.org"
      ],
      "alert_name": "Insecure Component",
      "source_url": "https://www.zaproxy.org/docs/alerts/10046/",
      "canonical_id": "423378dc-bd8e-525a-af49-3d9312a63cd3"
    },
    {
      "alert_id": "20019-4",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "601",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/601.html",
      "description": "URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"https://www.example.com/\". Features such as the ESAPI AccessReferenceMap provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
      "gitsrc": [
        "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
      ],
      "alert_name": "External Redirect",
      "source_url": "https://www.zaproxy.org/docs/alerts/20019-4/",
      "canonical_id": "1a6d71a8-a2f4-59fd-8523-de87537254aa"
    },
    {
      "alert_id": "100009",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "311",
      "reference": "Scan Rule Help",
      "description": "An email address was found in the HTTP response body. Exposure of email addresses in HTTP messages can lead to privacy violations  and targeted phishing attacks.",
      "remediation": "Mask email addresses during transmission and ensure proper access controls  to protect user privacy and prevent unauthorized access.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20Emails.js"
      ],
      "alert_name": "Information Disclosure - Email Addresses",
      "source_url": "https://www.zaproxy.org/docs/alerts/100009/",
      "canonical_id": "9435bbbd-14d9-501d-a917-0c98e280843c"
    },
    {
      "alert_id": "100030",
      "alert_type": "Script Active",
      "status": "alpha",
      "risk": "Low",
      "cweid": "425",
      "reference": "Scan Rule Help",
      "description": "A backup or alternate version of a page or component was detected. An attacker may leverage information in such files to further attack or abuse the system.",
      "remediation": "Ensure that backups are made in locations which are not web accessible.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/active/gof_lite.js"
      ],
      "alert_name": "Backup File Detected",
      "source_url": "https://www.zaproxy.org/docs/alerts/100030/",
      "canonical_id": "3bfba2fe-c5ad-5f80-88d1-323ea267246b"
    },
    {
      "alert_id": "10047",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Low",
      "cweid": "311",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html https://owasp.org/www-community/Security_Headers https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security https://caniuse.com/stricttransportsecurity https://datatracker.ietf.org/doc/html/rfc6797",
      "description": "Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption).",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/HttpsAsHttpScanRule.java"
      ],
      "alert_name": "HTTPS Content Available via HTTP",
      "source_url": "https://www.zaproxy.org/docs/alerts/10047/",
      "canonical_id": "d06cbdc8-dcd3-576b-be68-bfe30f5970c0"
    },
    {
      "alert_id": "90024",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "209",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/security-updates/securitybulletins/2010/ms10-070 https://www.mono-project.com/docs/about-mono/vulnerabilities/ https://bugzilla.redhat.com/show_bug.cgi?id=623799",
      "description": "By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely \u2018padding oracle\u2019 vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.",
      "remediation": "Update the affected server software, or modify the scripts so that they properly validate encrypted data before attempting decryption.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PaddingOracleScanRule.java"
      ],
      "alert_name": "Generic Padding Oracle",
      "source_url": "https://www.zaproxy.org/docs/alerts/90024/",
      "canonical_id": "d74a3119-2d45-5fb9-abc3-a287c7855b29"
    },
    {
      "alert_id": "10055-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: X-WebKit-CSP",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-2/",
      "canonical_id": "e6694e85-6209-5c7e-8213-69d1256b1859"
    },
    {
      "alert_id": "3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java"
      ],
      "alert_name": "Session ID in URL Rewrite",
      "source_url": "https://www.zaproxy.org/docs/alerts/3/",
      "canonical_id": "db20dfbe-a626-5772-94a5-48a1acb5cd69"
    },
    {
      "alert_id": "20019",
      "alert_type": "Active",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ExternalRedirectScanRule.java"
      ],
      "alert_name": "External Redirect",
      "source_url": "https://www.zaproxy.org/docs/alerts/20019/",
      "canonical_id": "aef3c207-9acd-5856-9e34-e2d8a6266178"
    },
    {
      "alert_id": "40027",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "89",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "SQL injection may be possible.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionMsSqlScanRule.java"
      ],
      "alert_name": "SQL Injection - MsSQL",
      "source_url": "https://www.zaproxy.org/docs/alerts/40027/",
      "canonical_id": "e5a36a68-ee88-53e2-a49b-e125b1d2c50f"
    },
    {
      "alert_id": "100012",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "200",
      "reference": "Scan Rule Help",
      "description": "An IBAN number was discovered in the HTTP response body.",
      "remediation": "Investigate IBAN numbers found in the response, remove or mask as required.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20IBANs.js"
      ],
      "alert_name": "Information Disclosure - IBAN Numbers",
      "source_url": "https://www.zaproxy.org/docs/alerts/100012/",
      "canonical_id": "98ed0ec4-25f0-53f5-bb07-2839baf04df3"
    },
    {
      "alert_id": "10050-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc7234 https://tools.ietf.org/html/rfc7231 https://www.rfc-editor.org/rfc/rfc9110.html",
      "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \u201cproxy\u201d caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
      "remediation": "Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user: Cache-Control: no-cache, no-store, must-revalidate, private Pragma: no-cache Expires: 0 This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/RetrievedFromCacheScanRule.java"
      ],
      "alert_name": "Retrieved from Cache",
      "source_url": "https://www.zaproxy.org/docs/alerts/10050-1/",
      "canonical_id": "3cf7c66f-4480-57b4-8404-8fd83ab9d946"
    },
    {
      "alert_id": "42",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "541",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Forced_browsing https://cwe.mitre.org/data/definitions/425.html",
      "description": "The source code for the current page was disclosed by the web server.",
      "remediation": "Ensure that SVN metadata files are not deployed to the web server or application server.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Forced_browsing"
      ],
      "alert_name": "Source Code Disclosure - SVN",
      "source_url": "https://www.zaproxy.org/docs/alerts/42/",
      "canonical_id": "c5459f63-08ec-5bd4-8950-4976e87813fb"
    },
    {
      "alert_id": "20015",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "119",
      "reference": "Scan Rule Help https://nvd.nist.gov/vuln/detail/CVE-2014-0160",
      "description": "The TLS implementation in OpenSSL 1.0.1 before 1.0.1g does not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.",
      "remediation": "Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/HeartBleedActiveScanRule.java"
      ],
      "alert_name": "Heartbleed OpenSSL Vulnerability",
      "source_url": "https://www.zaproxy.org/docs/alerts/20015/",
      "canonical_id": "58bd3438-4b2b-5303-936e-ef16fe3322ed"
    },
    {
      "alert_id": "10020-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "1021",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "description": "The response does not protect against \u2018ClickJacking\u2019 attacks. It should include either Content-Security-Policy with \u2018frame-ancestors\u2019 directive or X-Frame-Options.",
      "remediation": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app. If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/AntiClickjackingScanRule.java"
      ],
      "alert_name": "Missing Anti-clickjacking Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/10020-1/",
      "canonical_id": "8f96f83b-1db9-5ec5-917e-5bf0a9cc72cb"
    },
    {
      "alert_id": "10049-1",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Informational",
      "cweid": "524",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc7234 https://datatracker.ietf.org/doc/html/rfc7231 https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",
      "description": "The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.",
      "remediation": "The content may be marked as storable by ensuring that the following conditions are satisfied: The request method must be understood by the cache and defined as being cacheable (\"GET\", \"HEAD\", and \"POST\" are currently defined as cacheable) The response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood) The \"no-store\" cache directive must not appear in the request or response header fields For caching by \"shared\" caches such as \"proxy\" caches, the \"private\" response directive must not appear in the response For caching by \"shared\" caches such as \"proxy\" caches, the \"Authorization\" header field must not appear in the request, unless the response explicitly allows it (using one of the \"must-revalidate\", \"public\", or \"s-maxage\" Cache-Control response directives) In addition to the conditions above, at least one of the following conditions must also be satisfied by the response: It must contain an \"Expires\" header field It must contain a \"max-age\" response directive For \"shared\" caches such as \"proxy\" caches, it must contain a \"s-maxage\" response directive It must contain a \"Cache Control Extension\" that allows it to be cached It must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).",
      "gitsrc": [
        "https://datatracker.ietf.org/doc/html/rfc7234"
      ],
      "alert_name": "Non-Storable Content",
      "source_url": "https://www.zaproxy.org/docs/alerts/10049-1/",
      "canonical_id": "be5514f9-d441-5c35-b1d1-be743aeb4bc0"
    },
    {
      "alert_id": "10096",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "497",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/200.html",
      "description": "A timestamp was disclosed by the application/web server. - Unix",
      "remediation": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/TimestampDisclosureScanRule.java"
      ],
      "alert_name": "Timestamp Disclosure - Unix",
      "source_url": "https://www.zaproxy.org/docs/alerts/10096/",
      "canonical_id": "40e1c22b-58ce-53bd-bb87-effb0f379bd5"
    },
    {
      "alert_id": "50007",
      "alert_type": "Tool",
      "status": "alpha",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java"
      ],
      "alert_name": "ExtensionGraphQl",
      "source_url": "https://www.zaproxy.org/docs/alerts/50007/",
      "canonical_id": "7eecbd0f-b78e-5370-a7f0-6b89effdc5bd"
    },
    {
      "alert_id": "40035",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "538",
      "reference": "Scan Rule Help https://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html",
      "description": "A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.",
      "remediation": "Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/HiddenFilesScanRule.java"
      ],
      "alert_name": "Hidden File Found",
      "source_url": "https://www.zaproxy.org/docs/alerts/40035/",
      "canonical_id": "78925dc4-4b4e-5026-a807-7a322f08a0ca"
    },
    {
      "alert_id": "10055-3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: Notices",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-3/",
      "canonical_id": "6a1f9be7-4b79-5b5d-bbeb-38397ac2be23"
    },
    {
      "alert_id": "10054-3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "1275",
      "reference": "Scan Rule Help https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site",
      "description": "A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a \u2018cross-site\u2019 request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
      "remediation": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java"
      ],
      "alert_name": "Cookie with Invalid SameSite Attribute",
      "source_url": "https://www.zaproxy.org/docs/alerts/10054-3/",
      "canonical_id": "cf0bcc63-d608-5885-bd51-47d342a3958a"
    },
    {
      "alert_id": "100008",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "High",
      "cweid": "311",
      "reference": "Scan Rule Help",
      "description": "A credit card number was found in the HTTP response body.",
      "remediation": "Encrypt credit card numbers during transmission, use tokenization, and adhere to PCI DSS standards for secure handling and storage.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20Credit%20Cards.js"
      ],
      "alert_name": "Information Disclosure - Credit Card Number",
      "source_url": "https://www.zaproxy.org/docs/alerts/100008/",
      "canonical_id": "bf35c3c9-f15d-5b40-8c00-e316ab0d8223"
    },
    {
      "alert_id": "110007",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "284",
      "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References",
      "description": "A Example hash of {Example / context: Example} was found in incoming WebSocket message. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.",
      "remediation": "Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Username%20Idor%20Scanner.js"
      ],
      "alert_name": "Username Hash Found in WebSocket message",
      "source_url": "https://www.zaproxy.org/docs/alerts/110007/",
      "canonical_id": "9f5302d0-94d8-59e6-af3f-29a521d3535b"
    },
    {
      "alert_id": "10035-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "319",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html https://owasp.org/www-community/Security_Headers https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security https://caniuse.com/stricttransportsecurity https://datatracker.ietf.org/doc/html/rfc6797",
      "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Header Not Set",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-1/",
      "canonical_id": "f5ab8535-2469-573a-a617-e16bb51e9e64"
    },
    {
      "alert_id": "40036",
      "alert_type": "Active",
      "status": "alpha",
      "risk": "Medium",
      "cweid": "",
      "reference": "https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html",
      "description": "Scanner for finding vulnerabilities in JWT implementations.",
      "remediation": "See reference for further information. The solution depends on implementation details",
      "gitsrc": [
        "https://github.com/SasanLabs/owasp-zap-jwt-addon/blob/master/src/main/java/org/zaproxy/zap/extension/jwt/JWTActiveScanRule.java"
      ],
      "alert_name": "JWT Scan Rule",
      "source_url": "https://www.zaproxy.org/docs/alerts/40036/",
      "canonical_id": "7da51ca0-fc76-508f-b2cb-4cc6891f4e16"
    },
    {
      "alert_id": "40014",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "79",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/xss/ https://cwe.mitre.org/data/definitions/79.html",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user\u2019s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user\u2019s browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise. There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim\u2019s knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user\u2019s browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it\u2019s stored for a period of time. Examples of an attacker\u2019s favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "remediation": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.  Phases: Implementation; Architecture and Design Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.  Phase: Architecture and Design For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Phase: Implementation For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/xss/"
      ],
      "alert_name": "Cross Site Scripting (Persistent)",
      "source_url": "https://www.zaproxy.org/docs/alerts/40014/",
      "canonical_id": "6d97d30a-0dcb-542d-9cbb-a829086fc950"
    },
    {
      "alert_id": "120000-1",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "359",
      "reference": "Scan Rule Help",
      "description": "Information was stored in browser localStorage.\nThis is not unusual or necessarily unsafe - this informational alert has been raised to help you get a better understanding of what this app is doing. For more details see the Client tabs - this information was set directly in the browser and will therefore not necessarily appear in this form in any HTTP(S) messages.",
      "remediation": "This is an informational alert and no action is necessary.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/InformationInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - Information in Browser localStorage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120000-1/",
      "canonical_id": "b17968b0-dd84-5c65-999a-f1471652b54c"
    },
    {
      "alert_id": "90030",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "",
      "cweid": "",
      "reference": "Scan Rule Help",
      "description": "A WSDL File has been detected.",
      "remediation": "Make your WSDL files visible only for technical issues (ex: testing purposes).",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/WSDLFilePassiveScanRule.java"
      ],
      "alert_name": "WSDL File Detection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90030/",
      "canonical_id": "9d35e0b6-ef96-5054-aec3-dc3d1c8d586c"
    },
    {
      "alert_id": "10055-7",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP3/#unsafe-hashes-usage https://content-security-policy.com/examples/allow-inline-script/",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://www.w3.org/TR/CSP3/#unsafe-hashes-usage"
      ],
      "alert_name": "CSP: script-src unsafe-hashes",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-7/",
      "canonical_id": "d6b3190a-25a2-5584-9534-dc5edd6fd03f"
    },
    {
      "alert_id": "10055",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055/",
      "canonical_id": "bf0eb458-b5df-51da-b98a-30aa75b391e5"
    },
    {
      "alert_id": "40025",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "204",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc7231#section-5.1.2",
      "description": "",
      "remediation": "Disable the 'TRACE' method on the proxy servers, as well as the origin web/application server. Disable the 'OPTIONS' method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as 'CORS' (Cross Origin Resource Sharing). Configure the web and application servers with custom error pages, to prevent 'fingerprintable' product-specific error pages being leaked to the user in the event of HTTP errors, such as 'TRACK' requests for non-existent pages. Configure all proxies, application servers, and web servers to prevent disclosure of the technology and version information in the 'Server' and 'X-Powered-By' HTTP response headers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ProxyDisclosureScanRule.java"
      ],
      "alert_name": "Proxy Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/40025/",
      "canonical_id": "02c01a2d-9335-5c83-b0f7-1f4f7782a03b"
    },
    {
      "alert_id": "90011",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "436",
      "reference": "Scan Rule Help https://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection",
      "description": "This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there\u2019s a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content\u2019s correct character set. An attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.",
      "remediation": "Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.",
      "gitsrc": [
        "https://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection"
      ],
      "alert_name": "Charset Mismatch",
      "source_url": "https://www.zaproxy.org/docs/alerts/90011/",
      "canonical_id": "88d877ba-95b8-58d0-914d-3e35141af39a"
    },
    {
      "alert_id": "100005",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://tools.ietf.org/html/draft-west-first-party-cookies https://chloe.re/2016/04/13/goodbye-csrf-samesite-to-the-rescue",
      "description": "",
      "remediation": "CSRF possible vulnerabilities presents on the site will be mitigated depending on the browser used by the user (browser defines the support level for this cookie attribute).",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/detect_samesite_protection.js"
      ],
      "alert_name": "SameSite Cookie Attribute Protection Used",
      "source_url": "https://www.zaproxy.org/docs/alerts/100005/",
      "canonical_id": "37fe2ac0-4a3a-56bc-9a0b-fd3791fd27dc"
    },
    {
      "alert_id": "3-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "598",
      "reference": "Scan Rule Help https://seclists.org/webappsec/2002/q4/111",
      "description": "URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.",
      "remediation": "For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java"
      ],
      "alert_name": "Session ID in URL Rewrite",
      "source_url": "https://www.zaproxy.org/docs/alerts/3-2/",
      "canonical_id": "d45622ed-3e72-5f7e-a073-c6ad3752f0b1"
    },
    {
      "alert_id": "10011",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "614",
      "reference": "Scan Rule Help https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html",
      "description": "A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.",
      "remediation": "Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSecureFlagScanRule.java"
      ],
      "alert_name": "Cookie Without Secure Flag",
      "source_url": "https://www.zaproxy.org/docs/alerts/10011/",
      "canonical_id": "abcef726-6f62-5784-b88a-09384c6303a1"
    },
    {
      "alert_id": "90036",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "1336",
      "reference": "Scan Rule Help https://portswigger.net/blog/server-side-template-injection",
      "description": "When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.",
      "remediation": "Instead of inserting the user input in the template, use it as rendering argument.",
      "gitsrc": [
        "https://portswigger.net/blog/server-side-template-injection"
      ],
      "alert_name": "Server Side Template Injection (Blind)",
      "source_url": "https://www.zaproxy.org/docs/alerts/90036/",
      "canonical_id": "c0025fa6-0160-554e-98b8-23555cc2f3d2"
    },
    {
      "alert_id": "50007-2",
      "alert_type": "Tool",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "205",
      "reference": "Scan Rule Help https://example.com/graphql-engine-reference",
      "description": "The server is using \u201cExample GraphQL Engine\u201d, which is a GraphQL implementation for \u201cExample Technology 1\u201d and \u201cExample Technology 2\u201d.",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java"
      ],
      "alert_name": "GraphQL Server Implementation Identified",
      "source_url": "https://www.zaproxy.org/docs/alerts/50007-2/",
      "canonical_id": "43c4ee70-2481-5cc0-90bf-6ecf115d14bf"
    },
    {
      "alert_id": "120002-2",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "922",
      "reference": "Scan Rule Help https://www.zaproxy.org/blog/2020-09-03-zap-jwt-scanner/",
      "description": "JWT was stored in browser sessionStorage.\nThis is not unusual or necessarily unsafe - this informational alert has been raised to help you get a better understanding of what this app is doing. For more details see the Client tabs - this information was set directly in the browser and will therefore not necessarily appear in this form in any HTTP(S) messages.",
      "remediation": "Store JWTs in sessionStorage instead of localStorage so that is cleared when the page session ends.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/JwtInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - JWT in Browser sessionStorage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120002-2/",
      "canonical_id": "25d04b78-2cfa-599f-9624-67094b479296"
    },
    {
      "alert_id": "90025",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "917",
      "reference": "Scan Rule Help https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection https://cwe.mitre.org/data/definitions/917.html",
      "description": "The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.",
      "remediation": "Perform data validation best practice against untrusted input and to ensure that output encoding is applied when data arrives on the EL layer, so that no metacharacter is found by the interpreter within the user content before evaluation. The most obvious patterns to detect include ${ and #{, but it may be possible to encode or fragment this data.",
      "gitsrc": [
        "https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection"
      ],
      "alert_name": "Expression Language Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90025/",
      "canonical_id": "e052b3cb-6942-58d1-b42f-e875847ad200"
    },
    {
      "alert_id": "90039",
      "alert_type": "Active",
      "status": "alpha",
      "risk": "High",
      "cweid": "943",
      "reference": "Scan Rule Help https://arxiv.org/pdf/1506.04082.pdf https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html",
      "description": "MongoDB query injection may be possible.",
      "remediation": "Do not trust client side input and escape all data on the server side. Avoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/MongoDbInjectionTimingScanRule.java"
      ],
      "alert_name": "NoSQL Injection - MongoDB (Time Based)",
      "source_url": "https://www.zaproxy.org/docs/alerts/90039/",
      "canonical_id": "c9614851-df4b-5828-806a-2148bc1ffb3b"
    },
    {
      "alert_id": "90004",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SiteIsolationScanRule.java"
      ],
      "alert_name": "Insufficient Site Isolation Against Spectre Vulnerability",
      "source_url": "https://www.zaproxy.org/docs/alerts/90004/",
      "canonical_id": "dc615dd8-38a3-5cc9-b081-2fc99455fa9a"
    },
    {
      "alert_id": "10115-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "High",
      "cweid": "829",
      "reference": "Scan Rule Help https://sansec.io/research/polyfill-supply-chain-attack https://x.com/triblondon/status/1761852117579427975",
      "description": "The page includes one or more script which appear to include a reference to one of the \u2018polyfill\u2019 domains.\nThese are not associated with the polyfill.js library and are known to serve malicious content.\nYou should check to see if it is a safe reference (for example in a comment) or whether the script is loading content from that domain.",
      "remediation": "Change all scripts to use a known good source based on their documentation.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/PolyfillCdnScriptScanRule.java"
      ],
      "alert_name": "Script Served From Malicious Domain (polyfill)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10115-2/",
      "canonical_id": "4587efac-d1f6-5011-b231-970edae36ff1"
    },
    {
      "alert_id": "10108",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Reverse_Tabnabbing https://dev.to/ben/the-targetblank-vulnerability-by-example https://mathiasbynens.github.io/rel-noopener/ https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c",
      "description": "At least one link on this page is vulnerable to Reverse tabnabbing as it uses a target attribute without using both of the \u201cnoopener\u201d and \u201cnoreferrer\u201d keywords in the \u201crel\u201d attribute, which allows the target page to take control of this page.",
      "remediation": "Do not use a target attribute, or if you have to then also add the attribute: rel=\"noopener noreferrer\".",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/LinkTargetScanRule.java"
      ],
      "alert_name": "Reverse Tabnabbing",
      "source_url": "https://www.zaproxy.org/docs/alerts/10108/",
      "canonical_id": "1ed0034b-8b0b-5d5b-a214-c48195e09988"
    },
    {
      "alert_id": "100016",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help",
      "description": "Some of the following security headers are missing from the HTTP response: Strict-Transport-Security, Content-Security-Policy, X-XSS-Protection, X-Content-Type-Options, X-Frame-Options.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to set the missing security headers.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Mutliple%20Security%20Header%20Check.js"
      ],
      "alert_name": "Missing Security Headers",
      "source_url": "https://www.zaproxy.org/docs/alerts/100016/",
      "canonical_id": "e71f7f61-c706-5e7a-98c6-19ae5406120f"
    },
    {
      "alert_id": "10034",
      "alert_type": "Passive",
      "status": "release",
      "risk": "High",
      "cweid": "119",
      "reference": "Scan Rule Help https://nvd.nist.gov/vuln/detail/CVE-2014-0160",
      "description": "The TLS and DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.",
      "remediation": "Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/HeartBleedScanRule.java"
      ],
      "alert_name": "Heartbleed OpenSSL Vulnerability (Indicative)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10034/",
      "canonical_id": "56798c47-d822-5c04-a7e1-9a749abe1e3c"
    },
    {
      "alert_id": "10112",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Informational",
      "cweid": "",
      "reference": "https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id",
      "description": "The given response has been identified as containing a session management token. The \u2018Other Info\u2019 field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to \u201cAuto-Detect\u201d then this rule will change the session management to use the tokens identified.",
      "remediation": "This is an informational alert rather than a vulnerability and so there is nothing to fix.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/authhelper/src/main/java/org/zaproxy/addon/authhelper/SessionDetectionScanRule.java"
      ],
      "alert_name": "Session Management Response Identified",
      "source_url": "https://www.zaproxy.org/docs/alerts/10112/",
      "canonical_id": "2e8a46a4-a197-5c3e-9c5f-14f30433261e"
    },
    {
      "alert_id": "40012",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "79",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/xss/ https://cwe.mitre.org/data/definitions/79.html",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user\u2019s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user\u2019s browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise. There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim\u2019s knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user\u2019s browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it\u2019s stored for a period of time. Examples of an attacker\u2019s favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "remediation": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.  Phases: Implementation; Architecture and Design Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.  Phase: Architecture and Design For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Phase: Implementation For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/xss/"
      ],
      "alert_name": "Cross Site Scripting (Reflected)",
      "source_url": "https://www.zaproxy.org/docs/alerts/40012/",
      "canonical_id": "5d7a534a-5dc6-57fd-bc5f-c383f8e77bc0"
    },
    {
      "alert_id": "10049-2",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Informational",
      "cweid": "524",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc7234 https://datatracker.ietf.org/doc/html/rfc7231 https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",
      "description": "The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users.",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/CacheableScanRule.java"
      ],
      "alert_name": "Storable but Non-Cacheable Content",
      "source_url": "https://www.zaproxy.org/docs/alerts/10049-2/",
      "canonical_id": "61bbc3f7-828d-5ab3-9ff4-8239a21ca114"
    },
    {
      "alert_id": "100003",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "",
      "reference": "Scan Rule Help",
      "description": "A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.",
      "remediation": "Ensure that the HttpOnly flag is set for all cookies.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/CookieHTTPOnly.js"
      ],
      "alert_name": "Cookie Set Without HttpOnly Flag",
      "source_url": "https://www.zaproxy.org/docs/alerts/100003/",
      "canonical_id": "fc340ec0-5df9-5fc0-845f-f1537cf16645"
    },
    {
      "alert_id": "10113",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Informational",
      "cweid": "",
      "reference": "https://www.zaproxy.org/docs/desktop/addons/authentication-helper/verif-id",
      "description": "The given request has been identified as a good candidate for authentication verification. If the request is in a context which has a Verification Strategy set to \u201cPoll\u201d but where the URL is empty then this rule will fill in the correct values.",
      "remediation": "This is an informational alert rather than a vulnerability and so there is nothing to fix.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/authhelper/src/main/java/org/zaproxy/addon/authhelper/VerificationDetectionScanRule.java"
      ],
      "alert_name": "Verification Request Identified",
      "source_url": "https://www.zaproxy.org/docs/alerts/10113/",
      "canonical_id": "0dcdd35f-4c19-5841-a9f3-6cf1d8e8c4e8"
    },
    {
      "alert_id": "40047",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "117",
      "reference": "Scan Rule Help https://nvd.nist.gov/vuln/detail/CVE-2022-42889 https://securitylab.github.com/advisories/GHSL-2022-018_Apache_Commons_Text/",
      "description": "Apache Commons Text prior to 1.10.0 allows RCE when applied to untrusted input due to insecure interpolation defaults.Apache Commons Text performs variable interpolation, allowing properties to be dynamically evaluated and expanded.The application has been shown to initial contact with remote servers via variable interpolation and may well be vulnerable to Remote Code Execution (RCE).",
      "remediation": "Upgrade Apache Commons Text prior to version 1.10.0 or newer.",
      "gitsrc": [
        "https://nvd.nist.gov/vuln/detail/CVE-2022-42889"
      ],
      "alert_name": "Text4shell (CVE-2022-42889)",
      "source_url": "https://www.zaproxy.org/docs/alerts/40047/",
      "canonical_id": "11c5e844-03d3-5665-ab0b-be673b7b1017"
    },
    {
      "alert_id": "10044-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "201",
      "reference": "Scan Rule Help",
      "description": "The server has responded with a redirect that seems to contain multiple links. This may indicate that although the server sent a redirect it also responded with body content links (which may include sensitive details, PII, lead to admin panels, etc.).",
      "remediation": "Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/BigRedirectsScanRule.java"
      ],
      "alert_name": "Multiple HREFs Redirect Detected (Potential Sensitive Information Leak)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10044-2/",
      "canonical_id": "c313d22b-e68a-524d-859f-66f5ba641ebc"
    },
    {
      "alert_id": "10038-3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP2/ https://w3c.github.io/webappsec-csp/ https://caniuse.com/#feat=contentsecuritypolicy https://content-security-policy.com/",
      "description": "The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc. Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java"
      ],
      "alert_name": "Content Security Policy (CSP) Report-Only Header Found",
      "source_url": "https://www.zaproxy.org/docs/alerts/10038-3/",
      "canonical_id": "77bbc529-f8c5-5786-875b-597f6ecd5611"
    },
    {
      "alert_id": "40046",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "918",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
      "description": "The web server receives a remote address and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
      "remediation": "Do not accept remote addresses as request parameters, and if you must, ensure that they are validated against an allow-list of expected values.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/SsrfScanRule.java"
      ],
      "alert_name": "Server Side Request Forgery",
      "source_url": "https://www.zaproxy.org/docs/alerts/40046/",
      "canonical_id": "5cf9990f-342b-5f68-98c3-c4689cdcdadb"
    },
    {
      "alert_id": "90005-6",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Mode",
      "description": "Allows to differentiate between requests for navigating between HTML pages and requests for loading resources like images, audio etc.",
      "remediation": "Sec-Fetch-Mode header must have one of the following values: cors, no-cors, navigate, same-origin, or websocket.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-Mode Header Has an Invalid Value",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-6/",
      "canonical_id": "d1ec5c6f-b83d-5a7b-96f0-7344ec5d80bc"
    },
    {
      "alert_id": "40033",
      "alert_type": "Active",
      "status": "alpha",
      "risk": "High",
      "cweid": "943",
      "reference": "Scan Rule Help https://arxiv.org/pdf/1506.04082.pdf https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.html",
      "description": "MongoDB query injection may be possible.",
      "remediation": "Do not trust client side input and escape all data on the server side. Avoid to use the query input directly into the where and group clauses and upgrade all drivers at the latest available version.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/MongoDbInjectionScanRule.java"
      ],
      "alert_name": "NoSQL Injection - MongoDB",
      "source_url": "https://www.zaproxy.org/docs/alerts/40033/",
      "canonical_id": "a4a4315a-4bb5-559d-9d21-7df2f24addfc"
    },
    {
      "alert_id": "90022",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "550",
      "reference": "Scan Rule Help",
      "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
      "remediation": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ApplicationErrorScanRule.java"
      ],
      "alert_name": "Application Error Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/90022/",
      "canonical_id": "822c9bc2-fefc-5f6b-85e1-7ac3dd740b4e"
    },
    {
      "alert_id": "90028",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "749",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/205.html",
      "description": "The most common methodology for attackers is to first footprint the target\u2019s web presence and enumerate as much information as possible. With this information, the attacker may develop an accurate attack scenario, which will effectively exploit a vulnerability in the software type/version being utilized by the target host. Multi-tier fingerprinting is similar to its predecessor, TCP/IP Fingerprinting (with a scanner such as Nmap) except that it is focused on the Application Layer of the OSI model instead of the Transport Layer. The theory behind this fingerprinting is to create an accurate profile of the target\u2019s platform, web application software technology, backend database version, configurations and possibly even their network architecture/topology.",
      "remediation": "Implement measures to obfuscate or disguise information about the system's platform, web application software technology, backend database version, configurations, and network architecture/topology. This can include:  1. **Platform and Software Diversity:** Use a mix of technologies and platforms to make it harder for attackers to build an accurate profile.  2. **False Information:** Introduce fake or misleading information in system responses to confuse fingerprinting tools.  3. **Response Randomization:** Randomize certain elements in responses to make it difficult for attackers to consistently identify the system.  4. **Firewall Rules:** Implement firewall rules to block or limit the effectiveness of fingerprinting techniques.  5. **Regular Updates:** Keep software, platforms, and configurations up-to-date to patch known vulnerabilities and prevent accurate identification based on outdated information.  There is no one-size-fits-all solution, and a combination of these measures may be most effective.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/InsecureHttpMethodScanRule.java"
      ],
      "alert_name": "Insecure HTTP Method",
      "source_url": "https://www.zaproxy.org/docs/alerts/90028/",
      "canonical_id": "98a26b2c-bb4c-571c-8b47-072df6a6997b"
    },
    {
      "alert_id": "10016",
      "alert_type": "Passive",
      "status": "deprecated",
      "risk": "",
      "cweid": "",
      "reference": "",
      "description": "Web Browser XSS Protection is not enabled, or is disabled by the configuration of the \u2018X-XSS-Protection\u2019 HTTP response header on the web server Deprecated: 2020-02-11 No longer widely supported by browsers.",
      "remediation": "",
      "gitsrc": [
        "https://www.zaproxy.org"
      ],
      "alert_name": "Web Browser XSS Protection Not Enabled",
      "source_url": "https://www.zaproxy.org/docs/alerts/10016/",
      "canonical_id": "d7a4b1cf-a12c-54b1-b05b-19be1837c7cc"
    },
    {
      "alert_id": "10111",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Informational",
      "cweid": "",
      "reference": "https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/",
      "description": "The given request has been identified as an authentication request. The \u2018Other Info\u2019 field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to \u201cAuto-Detect\u201d then this rule will change the authentication to match the request identified.",
      "remediation": "This is an informational alert rather than a vulnerability and so there is nothing to fix.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/authhelper/src/main/java/org/zaproxy/addon/authhelper/AuthenticationDetectionScanRule.java"
      ],
      "alert_name": "Authentication Request Identified",
      "source_url": "https://www.zaproxy.org/docs/alerts/10111/",
      "canonical_id": "b066ddb1-8d89-5a50-bb00-8526ef429141"
    },
    {
      "alert_id": "90004-1",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Cross-Origin_Resource_Policy",
      "description": "Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.",
      "remediation": "Ensure that the application/web server sets the Cross-Origin-Resource-Policy header appropriately, and that it sets the Cross-Origin-Resource-Policy header to 'same-origin' for all web pages. 'same-site' is considered as less secured and should be avoided. If resources must be shared, set the header to 'cross-origin'. If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Resource-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-resource-policy).",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SiteIsolationScanRule.java"
      ],
      "alert_name": "Insufficient Site Isolation Against Spectre Vulnerability",
      "source_url": "https://www.zaproxy.org/docs/alerts/90004-1/",
      "canonical_id": "60a2b1d0-2145-591e-83c1-b42d67f86faf"
    },
    {
      "alert_id": "10038-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html https://www.w3.org/TR/CSP/ https://w3c.github.io/webappsec-csp/ https://web.dev/articles/csp https://caniuse.com/#feat=contentsecuritypolicy https://content-security-policy.com/",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java"
      ],
      "alert_name": "Content Security Policy (CSP) Header Not Set",
      "source_url": "https://www.zaproxy.org/docs/alerts/10038-1/",
      "canonical_id": "c6573dd8-4c21-5f38-847a-ae1b86735c58"
    },
    {
      "alert_id": "20016-3",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "264",
      "reference": "Scan Rule Help https://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v=vs.95) https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v=vs.95)",
      "description": "Silverlight based cross-site request forgery may be possible, due to a misconfiguration on the web server.",
      "remediation": "Configure the clientaccesspolicy.xml file to restrict the list of domains that are allowed to make cross-domain requests to this web server, using <domain uri=\"https://example.com\" />. You should only grant access to \"*\" (all domains) if you are certain that this service does not host any access-controlled, personalized, or private data.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CrossDomainScanRule.java"
      ],
      "alert_name": "Cross-Domain Misconfiguration - Silverlight",
      "source_url": "https://www.zaproxy.org/docs/alerts/20016-3/",
      "canonical_id": "0e6064a4-7b4a-5038-931a-d6c909f5a05e"
    },
    {
      "alert_id": "10050",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/RetrievedFromCacheScanRule.java"
      ],
      "alert_name": "Retrieved from Cache",
      "source_url": "https://www.zaproxy.org/docs/alerts/10050/",
      "canonical_id": "2bdd1510-afdb-5034-86ba-52cd144fecc9"
    },
    {
      "alert_id": "120002",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/JwtInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - JWT in Browser Storage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120002/",
      "canonical_id": "f118b684-db54-5e0f-8534-62e77b63da9c"
    },
    {
      "alert_id": "10070",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "",
      "cweid": "",
      "reference": "",
      "description": "Unavailable",
      "remediation": "_Unavailable_",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/saml/src/main/java/org/zaproxy/zap/extension/saml/SAMLPassiveScanner.java"
      ],
      "alert_name": "Use of SAML",
      "source_url": "https://www.zaproxy.org/docs/alerts/10070/",
      "canonical_id": "ff1f23a7-78d1-5985-a04c-87caf5e2556d"
    },
    {
      "alert_id": "90019-1",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "94",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/94.html https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection",
      "description": "A code injection may be possible including custom code that will be evaluated by the scripting engine.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side and escape all data received from the client. Avoid the use of eval() functions combined with user input data.",
      "gitsrc": [
        "https://cwe.mitre.org/data/definitions/94.html"
      ],
      "alert_name": "Server Side Code Injection - PHP Code Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90019-1/",
      "canonical_id": "f387731b-3193-5b45-96be-79905c46fdee"
    },
    {
      "alert_id": "10055-11",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "The policy specified via meta element contains either or both the sandbox or frame-ancestors directive, which are not permitted inside meta CSP definitions.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: Meta Policy Invalid Directive",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-11/",
      "canonical_id": "00563bb7-b8eb-547d-a7ad-c3f59c0fc83a"
    },
    {
      "alert_id": "40024",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "89",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "SQL injection may be possible.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionSqLiteScanRule.java"
      ],
      "alert_name": "SQL Injection - SQLite",
      "source_url": "https://www.zaproxy.org/docs/alerts/40024/",
      "canonical_id": "e33aa6f0-c84c-515c-9b84-55a98b373c10"
    },
    {
      "alert_id": "90020",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "78",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/78.html https://owasp.org/www-community/attacks/Command_Injection",
      "description": "Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.",
      "remediation": "If at all possible, use library calls rather than external processes to recreate the desired functionality.  Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.  For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the command locally in the session's state instead of sending it out to the client in a hidden form field.  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.  For example, consider using the ESAPI Encoding control or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.  If you need to use dynamically-generated query strings or commands in spite of the risk, properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allow list (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection.  If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  When constructing OS command strings, use stringent allow lists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \">\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.  Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
      "gitsrc": [
        "https://cwe.mitre.org/data/definitions/78.html"
      ],
      "alert_name": "Remote OS Command Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90020/",
      "canonical_id": "cf12bfaf-d711-512b-9ffd-d541ae2bc71f"
    },
    {
      "alert_id": "6-4",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "22",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Path_Traversal https://cwe.mitre.org/data/definitions/22.html",
      "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal. Most web sites restrict user access to a specific portion of the file-system, typically called the \u201cweb document root\u201d or \u201cCGI root\u201d directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences. The most basic Path Traversal attack uses the \u201c../\u201d special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \u201c../\u201d sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \u201c..%c0%af\u201d) of the forward slash character, backslash characters (\"..\") on Windows-based servers, URL encoded characters \u201c%2e%2e%2f\u201d), and double URL encoding (\"..%255c\") of the backslash character. Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application\u2019s dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \u201c%00\u201d NULL characters in order to bypass rudimentary file extension checks.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Path_Traversal"
      ],
      "alert_name": "Path Traversal",
      "source_url": "https://www.zaproxy.org/docs/alerts/6-4/",
      "canonical_id": "d6422fc9-2410-5d28-9879-cd8d9c418d48"
    },
    {
      "alert_id": "41",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "541",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Forced_browsing https://cwe.mitre.org/data/definitions/425.html",
      "description": "The source code for the current page was disclosed by the web server.",
      "remediation": "Ensure that Git metadata files are not deployed to the web server or application server.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Forced_browsing"
      ],
      "alert_name": "Source Code Disclosure - Git",
      "source_url": "https://www.zaproxy.org/docs/alerts/41/",
      "canonical_id": "378ac85e-6b68-5667-b9e8-5e3be98df67b"
    },
    {
      "alert_id": "10032",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
      ],
      "alert_name": "Viewstate",
      "source_url": "https://www.zaproxy.org/docs/alerts/10032/",
      "canonical_id": "0d3bdf8b-187d-55bb-8a37-4649aa926727"
    },
    {
      "alert_id": "90035",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "1336",
      "reference": "Scan Rule Help https://portswigger.net/blog/server-side-template-injection",
      "description": "When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.",
      "remediation": "Instead of inserting the user input in the template, use it as rendering argument.",
      "gitsrc": [
        "https://portswigger.net/blog/server-side-template-injection"
      ],
      "alert_name": "Server Side Template Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90035/",
      "canonical_id": "48e45029-f8ad-5824-9a48-9752d6142f46"
    },
    {
      "alert_id": "10049",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/CacheableScanRule.java"
      ],
      "alert_name": "Content Cacheability",
      "source_url": "https://www.zaproxy.org/docs/alerts/10049/",
      "canonical_id": "a7faa9b2-304b-5124-bc47-2a7912402038"
    },
    {
      "alert_id": "10043",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "20",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html",
      "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
      "remediation": "Validate all input and sanitize output it before writing to any Javascript on* events.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/UserControlledJavascriptEventScanRule.java"
      ],
      "alert_name": "User Controllable JavaScript Event (XSS)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10043/",
      "canonical_id": "c477cfbf-8bfa-5a03-9814-ed10755915ad"
    },
    {
      "alert_id": "10009",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Low",
      "cweid": "497",
      "reference": "Scan Rule Help https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/",
      "description": "The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.",
      "remediation": "Configure the server to prevent such information leaks. For example: Under Tomcat this is done via the \"server\" directive and implementation of custom error pages. Under Apache this is done via the \"ServerSignature\" and \"ServerTokens\" directives.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/InPageBannerInfoLeakScanRule.java"
      ],
      "alert_name": "In Page Banner Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/10009/",
      "canonical_id": "423060cb-c1ef-55fc-b105-4c6dc494236e"
    },
    {
      "alert_id": "10032-5",
      "alert_type": "Passive",
      "status": "release",
      "risk": "High",
      "cweid": "642",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff649308(v=pandp.10)",
      "description": "This website uses ASP.NET\u2019s Viewstate but without any MAC.",
      "remediation": "Ensure the MAC is set for all pages on this website.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
      ],
      "alert_name": "Viewstate without MAC Signature (Sure)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10032-5/",
      "canonical_id": "38c0580c-0cdd-5c66-abda-146d86c3dd46"
    },
    {
      "alert_id": "40044",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "776",
      "reference": "Scan Rule Help https://en.wikipedia.org/wiki/Billion_laughs_attack https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing https://cwe.mitre.org/data/definitions/776.html",
      "description": "An exponential entity expansion, or \u201cbillion laughs\u201d attack is a type of denial-of-service (DoS) attack. It is aimed at parsers of markup languages like XML or YAML that allow macro expansions.",
      "remediation": "Defenses against this kind of attack include capping the memory allocated in an individual parser if loss of the document is acceptable, or treating entities symbolically and expanding them lazily only when (and to the extent) their content is to be used.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ExponentialEntityExpansionScanRule.java"
      ],
      "alert_name": "Exponential Entity Expansion (Billion Laughs Attack)",
      "source_url": "https://www.zaproxy.org/docs/alerts/40044/",
      "canonical_id": "e06acd20-a7bb-5932-be72-9902e0df4ea1"
    },
    {
      "alert_id": "90019",
      "alert_type": "Active",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://www.zaproxy.org/docs/alerts/90019-2"
      ],
      "alert_name": "Server Side Code Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90019/",
      "canonical_id": "aca91adf-9624-5b65-a55a-d0e7f484d844"
    },
    {
      "alert_id": "90019-2",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "94",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/94.html https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection",
      "description": "A code injection may be possible including custom code that will be evaluated by the scripting engine.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side and escape all data received from the client. Avoid the use of eval() functions combined with user input data.",
      "gitsrc": [
        "https://cwe.mitre.org/data/definitions/94.html"
      ],
      "alert_name": "Server Side Code Injection - ASP Code Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90019-2/",
      "canonical_id": "8565d398-ccfc-59e6-b906-847b1bc376b5"
    },
    {
      "alert_id": "110004",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "200",
      "reference": "",
      "description": "An email address was found in a WebSocket Message.",
      "remediation": "Remove emails that are not public.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Email%20Disclosure.js"
      ],
      "alert_name": "Email address found in WebSocket message",
      "source_url": "https://www.zaproxy.org/docs/alerts/110004/",
      "canonical_id": "cc01c6de-491c-5615-b1e7-f137ecb064c0"
    },
    {
      "alert_id": "90005",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Fetch Metadata Request Headers",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005/",
      "canonical_id": "fae6afc2-d720-546b-a90e-9d38b5d8bd57"
    },
    {
      "alert_id": "10020-4",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "1021",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc7034#section-2.1",
      "description": "An X-Frame-Options header was present in the response but the value was not correctly set.",
      "remediation": "Ensure a valid setting is used on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/AntiClickjackingScanRule.java"
      ],
      "alert_name": "X-Frame-Options Setting Malformed",
      "source_url": "https://www.zaproxy.org/docs/alerts/10020-4/",
      "canonical_id": "72717e22-440f-5abe-811a-852dfb84b1d6"
    },
    {
      "alert_id": "40040-3",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "942",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS https://portswigger.net/web-security/cors",
      "description": "This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim\u2019s user agent.\nIn order to perform authenticated AJAX queries, the server must specify the header \u201cAccess-Control-Allow-Credentials: true\u201d and the \u201cAccess-Control-Allow-Origin\u201d header must be set to null or the malicious page\u2019s domain. Even if this misconfiguration doesn\u2019t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).\nA malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).",
      "remediation": "If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.",
      "gitsrc": [
        "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
      ],
      "alert_name": "CORS Misconfiguration",
      "source_url": "https://www.zaproxy.org/docs/alerts/40040-3/",
      "canonical_id": "0e3bb0cd-65e1-540c-9fc8-e8fa68e445e7"
    },
    {
      "alert_id": "110006",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "",
      "reference": "https://tools.ietf.org/html/rfc1918",
      "description": "A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the incoming WebSocket message. This information might be helpful for further attacks targeting internal systems.",
      "remediation": "Remove the private IP address from the WebSocket messages.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Private%20IP%20Disclosure.js"
      ],
      "alert_name": "Private IP Disclosure via WebSocket",
      "source_url": "https://www.zaproxy.org/docs/alerts/110006/",
      "canonical_id": "a75a7609-0326-56d1-90b3-b11f0e985d22"
    },
    {
      "alert_id": "110009",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "209",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Full_Path_Disclosure",
      "description": "The full path of files which might be sensitive has been exposed to the client.",
      "remediation": "Disable directory browsing in your web server. Refer to the web server documentation.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FullPathDisclosureScanRule.java"
      ],
      "alert_name": "Full Path Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/110009/",
      "canonical_id": "a1490e88-f627-5e1b-9476-0ea860c30bf7"
    },
    {
      "alert_id": "10050-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc7234 https://tools.ietf.org/html/rfc7231 https://www.rfc-editor.org/rfc/rfc9110.html",
      "description": "The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as \u201cproxy\u201d caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
      "remediation": "Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user: Cache-Control: no-cache, no-store, must-revalidate, private Pragma: no-cache Expires: 0 This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/RetrievedFromCacheScanRule.java"
      ],
      "alert_name": "Retrieved from Cache",
      "source_url": "https://www.zaproxy.org/docs/alerts/10050-2/",
      "canonical_id": "c8a22785-21cd-5126-bc41-b4a7b3b391b8"
    },
    {
      "alert_id": "10061",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "933",
      "reference": "Scan Rule Help https://www.troyhunt.com/shhh-dont-let-your-response-headers/ https://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/",
      "description": "Server leaks information via \u201cX-AspNet-Version\u201d/\u201cX-AspNetMvc-Version\u201d HTTP response header field(s).",
      "remediation": "Configure the server so it will not return those headers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XAspNetVersionScanRule.java"
      ],
      "alert_name": "X-AspNet-Version Response Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/10061/",
      "canonical_id": "aaae9dbe-0f35-513c-a52b-9b059681c8fc"
    },
    {
      "alert_id": "10035",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035/",
      "canonical_id": "9106ad29-83c6-5383-a05b-4a3e5ca41cfa"
    },
    {
      "alert_id": "90005-2",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Mode",
      "description": "Allows to differentiate between requests for navigating between HTML pages and requests for loading resources like images, audio etc.",
      "remediation": "Ensure that Sec-Fetch-Mode header is included in request headers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-Mode Header is Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-2/",
      "canonical_id": "2208e3d8-ecf4-5e38-bb9f-2b57776269f7"
    },
    {
      "alert_id": "10038-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "693",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html https://www.w3.org/TR/CSP/ https://w3c.github.io/webappsec-csp/ https://web.dev/articles/csp https://caniuse.com/#feat=contentsecuritypolicy https://content-security-policy.com/",
      "description": "The \u201cX-Content-Security-Policy\u201d and \u201cX-WebKit-CSP\u201d headers are no longer recommended.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java"
      ],
      "alert_name": "Obsolete Content Security Policy (CSP) Header Found",
      "source_url": "https://www.zaproxy.org/docs/alerts/10038-2/",
      "canonical_id": "0d2b32b8-734f-5e03-a1a1-79de3c2f279e"
    },
    {
      "alert_id": "100002",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "200",
      "reference": "Scan Rule Help https://xclacksoverhead.org/home/about",
      "description": "The web/application server is running over the Clacks network, some say it\u2019s turtles/IP,  some say it\u2019s turtles all the way down the layer stack.",
      "remediation": "Give the sysadmin a high five and rejoice in the disc world.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/clacks.js"
      ],
      "alert_name": "Server is running on Clacks - GNU Terry Pratchett",
      "source_url": "https://www.zaproxy.org/docs/alerts/100002/",
      "canonical_id": "50645b71-980b-51a2-a54f-4d118185362f"
    },
    {
      "alert_id": "10021",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85) https://owasp.org/www-community/Security_Headers",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to \u2019nosniff\u2019. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "remediation": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages. If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XContentTypeOptionsScanRule.java"
      ],
      "alert_name": "X-Content-Type-Options Header Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/10021/",
      "canonical_id": "8af2f898-07b7-5d80-a94b-69f00441428e"
    },
    {
      "alert_id": "10025",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "598",
      "reference": "Scan Rule Help",
      "description": "The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.",
      "remediation": "Do not pass sensitive information in URIs.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InformationDisclosureReferrerScanRule.java"
      ],
      "alert_name": "Information Disclosure - Sensitive Information in HTTP Referrer Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/10025/",
      "canonical_id": "c85d193c-083d-5719-ae37-69fb20069b50"
    },
    {
      "alert_id": "10055-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: X-Content-Security-Policy",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-1/",
      "canonical_id": "a87933fa-fa5c-5fb7-a626-96793404ea03"
    },
    {
      "alert_id": "10020",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/AntiClickjackingScanRule.java"
      ],
      "alert_name": "Anti-clickjacking Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/10020/",
      "canonical_id": "793fba32-67ec-5409-8298-e2e811d58b85"
    },
    {
      "alert_id": "10063-1",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy https://developer.chrome.com/blog/feature-policy/ https://scotthelme.co.uk/a-new-security-header-feature-policy/ https://w3c.github.io/webappsec-feature-policy/ https://www.smashingmagazine.com/2018/12/feature-policy/",
      "description": "Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/PermissionsPolicyScanRule.java"
      ],
      "alert_name": "Permissions Policy Header Not Set",
      "source_url": "https://www.zaproxy.org/docs/alerts/10063-1/",
      "canonical_id": "f2ee1c74-7af9-50aa-8bed-08139b156e9f"
    },
    {
      "alert_id": "10045",
      "alert_type": "Active",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://www.zaproxy.org/docs/alerts/10045-2"
      ],
      "alert_name": "Source Code Disclosure - /WEB-INF Folder",
      "source_url": "https://www.zaproxy.org/docs/alerts/10045/",
      "canonical_id": "7096026b-7fb1-58c8-bebd-57d9cd49704d"
    },
    {
      "alert_id": "100011",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "615",
      "reference": "Scan Rule Help",
      "description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.",
      "remediation": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect  the security posture of the application.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20HTML%20Comments.js"
      ],
      "alert_name": "Information Disclosure - HTML Comments",
      "source_url": "https://www.zaproxy.org/docs/alerts/100011/",
      "canonical_id": "d93ce004-585c-5e3a-91fa-846325858f32"
    },
    {
      "alert_id": "40034",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "215",
      "reference": "Scan Rule Help https://www.google.com/search?q=db_password+filetype%3Aenv https://mobile.twitter.com/svblxyz/status/1045013939904532482",
      "description": "One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information.",
      "remediation": "Ensure the .env file is not accessible.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/EnvFileScanRule.java"
      ],
      "alert_name": ".env Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/40034/",
      "canonical_id": "712b0f42-05e7-57f6-80c2-39955fd732f2"
    },
    {
      "alert_id": "30003",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "190",
      "reference": "Scan Rule Help https://en.wikipedia.org/wiki/Integer_overflow https://cwe.mitre.org/data/definitions/190.html",
      "description": "An integer overflow condition exists when an integer used in a compiled program extends beyond the range limits and has not been properly checked from the input stream.",
      "remediation": "In order to prevent overflows and divide by 0 (zero) errors in the application, please rewrite the backend program, checking if the values of integers being processed are within the application's allowed range. This will require a recompilation of the backend executable.",
      "gitsrc": [
        "https://en.wikipedia.org/wiki/Integer_overflow"
      ],
      "alert_name": "Integer Overflow Error",
      "source_url": "https://www.zaproxy.org/docs/alerts/30003/",
      "canonical_id": "ace9e7bb-b3da-5fca-bdae-695d92f68a1b"
    },
    {
      "alert_id": "10032-3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "642",
      "reference": "Scan Rule Help",
      "description": "This website uses ASP.NET version 1.0 or 1.1.",
      "remediation": "Ensure the engaged framework is still supported by Microsoft.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
      ],
      "alert_name": "Old Asp.Net Version in Use",
      "source_url": "https://www.zaproxy.org/docs/alerts/10032-3/",
      "canonical_id": "af845656-8585-55d9-ae70-4628c42783dd"
    },
    {
      "alert_id": "6-1",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "22",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Path_Traversal https://cwe.mitre.org/data/definitions/22.html",
      "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal. Most web sites restrict user access to a specific portion of the file-system, typically called the \u201cweb document root\u201d or \u201cCGI root\u201d directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences. The most basic Path Traversal attack uses the \u201c../\u201d special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \u201c../\u201d sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \u201c..%c0%af\u201d) of the forward slash character, backslash characters (\"..\") on Windows-based servers, URL encoded characters \u201c%2e%2e%2f\u201d), and double URL encoding (\"..%255c\") of the backslash character. Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application\u2019s dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \u201c%00\u201d NULL characters in order to bypass rudimentary file extension checks.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Path_Traversal"
      ],
      "alert_name": "Path Traversal",
      "source_url": "https://www.zaproxy.org/docs/alerts/6-1/",
      "canonical_id": "86e0cc87-17d2-5440-9302-0fccd82808ef"
    },
    {
      "alert_id": "6-3",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "22",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Path_Traversal https://cwe.mitre.org/data/definitions/22.html",
      "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal. Most web sites restrict user access to a specific portion of the file-system, typically called the \u201cweb document root\u201d or \u201cCGI root\u201d directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences. The most basic Path Traversal attack uses the \u201c../\u201d special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \u201c../\u201d sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \u201c..%c0%af\u201d) of the forward slash character, backslash characters (\"..\") on Windows-based servers, URL encoded characters \u201c%2e%2e%2f\u201d), and double URL encoding (\"..%255c\") of the backslash character. Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application\u2019s dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \u201c%00\u201d NULL characters in order to bypass rudimentary file extension checks.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Path_Traversal"
      ],
      "alert_name": "Path Traversal",
      "source_url": "https://www.zaproxy.org/docs/alerts/6-3/",
      "canonical_id": "068a8f8d-78d2-50e0-93cb-e2cc27469b51"
    },
    {
      "alert_id": "40026",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "79",
      "reference": "https://owasp.org/www-community/attacks/xss/ https://cwe.mitre.org/data/definitions/79.html",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user\u2019s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user\u2019s browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise. There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim\u2019s knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user\u2019s browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it\u2019s stored for a period of time. Examples of an attacker\u2019s favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "remediation": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.  Phases: Implementation; Architecture and Design Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.  Phase: Architecture and Design For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Phase: Implementation For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/xss/"
      ],
      "alert_name": "Cross Site Scripting (DOM Based)",
      "source_url": "https://www.zaproxy.org/docs/alerts/40026/",
      "canonical_id": "4b12de94-492a-522c-8a6e-0bc142bd8c71"
    },
    {
      "alert_id": "10062",
      "alert_type": "Passive",
      "status": "release",
      "risk": "High",
      "cweid": "359",
      "reference": "Scan Rule Help",
      "description": "The response contains Personally Identifiable Information, such as CC number, SSN and similar sensitive data.",
      "remediation": "Check the response for the potential presence of personally identifiable information (PII), ensure nothing sensitive is leaked by the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/PiiScanRule.java"
      ],
      "alert_name": "PII Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/10062/",
      "canonical_id": "0ea251c5-4b61-5c0d-8b30-65427772e6d1"
    },
    {
      "alert_id": "6",
      "alert_type": "Active",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PathTraversalScanRule.java"
      ],
      "alert_name": "Path Traversal",
      "source_url": "https://www.zaproxy.org/docs/alerts/6/",
      "canonical_id": "b04897e5-228b-55bc-970d-8e1dac35e9f1"
    },
    {
      "alert_id": "10094",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java"
      ],
      "alert_name": "Base64 Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/10094/",
      "canonical_id": "db9e2085-625a-5f59-bbb0-c21853d86eb0"
    },
    {
      "alert_id": "40042",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "215",
      "reference": "Scan Rule Help https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/#overview",
      "description": "Spring Actuator for Health is enabled and may reveal sensitive information about this application. Spring Actuators can be used for real monitoring purposes, but should be used with caution as to not expose too much information about the application or the infrastructure running it.",
      "remediation": "Disable the Health Actuators and other actuators, or restrict them to administrative users.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SpringActuatorScanRule.java"
      ],
      "alert_name": "Spring Actuator Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/40042/",
      "canonical_id": "7f3e2ff5-051a-5627-8375-ba8c893a78af"
    },
    {
      "alert_id": "40019",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "89",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "SQL injection may be possible.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionMySqlScanRule.java"
      ],
      "alert_name": "SQL Injection - MySQL",
      "source_url": "https://www.zaproxy.org/docs/alerts/40019/",
      "canonical_id": "450a79e3-8ff0-5a89-9f99-c263c82e41c1"
    },
    {
      "alert_id": "10058",
      "alert_type": "Active",
      "status": "release",
      "risk": "Informational",
      "cweid": "16",
      "reference": "Scan Rule Help",
      "description": "A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.",
      "remediation": "Ensure that only POST is accepted where POST is expected.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/GetForPostScanRule.java"
      ],
      "alert_name": "GET for POST",
      "source_url": "https://www.zaproxy.org/docs/alerts/10058/",
      "canonical_id": "ae5b13fe-69bc-5435-894e-dc8ee87fa7bd"
    },
    {
      "alert_id": "2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "497",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc1918",
      "description": "A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.",
      "remediation": "Remove the private IP address from the HTTP response body. For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InfoPrivateAddressDisclosureScanRule.java"
      ],
      "alert_name": "Private IP Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/2/",
      "canonical_id": "fb647f14-393d-5de1-86c3-947409accdb2"
    },
    {
      "alert_id": "10026",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Medium",
      "cweid": "20",
      "reference": "Scan Rule Help https://download.oracle.com/javaee-archive/servlet-spec.java.net/jsr340-experts/att-0317/OnParameterPollutionAttacks.pdf",
      "description": "Unspecified form action: HTTP parameter override attack potentially possible. This is a known problem with Java Servlets but other platforms may also be vulnerable.",
      "remediation": "All forms must specify the action URL.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/ServletParameterPollutionScanRule.java"
      ],
      "alert_name": "HTTP Parameter Override",
      "source_url": "https://www.zaproxy.org/docs/alerts/10026/",
      "canonical_id": "4e335390-d0b7-5f98-8a49-1845b3e7b90e"
    },
    {
      "alert_id": "40039",
      "alert_type": "Active",
      "status": "alpha",
      "risk": "Medium",
      "cweid": "",
      "reference": "Scan Rule Help https://blogs.akamai.com/2017/03/on-web-cache-deception-attacks.html https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/web-cache-deception/",
      "description": "Web cache deception may be possible. It may be possible for unauthorised user to view sensitive data on this page.",
      "remediation": "It is strongly advised to refrain from classifying file types, such as images or stylesheets solely by their URL and file extension. Instead you should make sure that files are cached based on their Content-Type header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/WebCacheDeceptionScanRule.java"
      ],
      "alert_name": "Web Cache Deception",
      "source_url": "https://www.zaproxy.org/docs/alerts/40039/",
      "canonical_id": "b5d41434-3c9f-51b9-b600-1121530989cc"
    },
    {
      "alert_id": "40041",
      "alert_type": "Active",
      "status": "alpha",
      "risk": "Medium",
      "cweid": "",
      "reference": "https://cwe.mitre.org/data/definitions/434.html",
      "description": "File Upload scan rule is used to scan the vulnerabilities in the File Upload functionality of web applications.",
      "remediation": "Follow the suggestions mentioned in following links: 1. https://portswigger.net/kb/issues/00500980_file-upload-functionality 2. https://www.youtube.com/watch?v=CmF9sEyKZNo",
      "gitsrc": [
        "https://github.com/SasanLabs/owasp-zap-fileupload-addon/blob/main/src/main/java/org/sasanlabs/fileupload/FileUploadScanRule.java"
      ],
      "alert_name": "File Upload",
      "source_url": "https://www.zaproxy.org/docs/alerts/40041/",
      "canonical_id": "61495383-f124-5537-84f3-d716eba8af67"
    },
    {
      "alert_id": "40016",
      "alert_type": "Active",
      "status": "release",
      "risk": "Informational",
      "cweid": "79",
      "reference": "Scan Rule Help",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PersistentXssPrimeScanRule.java"
      ],
      "alert_name": "Cross Site Scripting (Persistent) - Prime",
      "source_url": "https://www.zaproxy.org/docs/alerts/40016/",
      "canonical_id": "3a6a7f36-4172-563b-887c-de2ac0252651"
    },
    {
      "alert_id": "40043",
      "alert_type": "Active",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/Log4ShellScanRule.java"
      ],
      "alert_name": "Log4Shell",
      "source_url": "https://www.zaproxy.org/docs/alerts/40043/",
      "canonical_id": "1c1e79bc-0892-5422-bd10-c9c8df66d9bf"
    },
    {
      "alert_id": "90021",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "643",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/XPATH_Injection https://owasp.org/www-community/attacks/Blind_XPath_Injection https://cwe.mitre.org/data/definitions/643.html",
      "description": "XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents. It can be used directly by an application to query an XML document, as part of a larger operation such as applying an XSLT transformation to an XML document, or applying an XQuery to an XML document. The syntax of XPath bears some resemblance to an SQL query, and indeed, it is possible to form SQL-like queries on an XML document using XPath. If an application uses run-time XPath query construction, embedding unsafe user input into the query, it may be possible for the attacker to inject data into the query such that the newly formed query will be parsed in a way differing from the programmer\u2019s intention.",
      "remediation": "Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.  Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/XpathInjectionScanRule.java"
      ],
      "alert_name": "XPath Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90021/",
      "canonical_id": "68ca8119-aba3-57f8-bb44-c6ddc1d66439"
    },
    {
      "alert_id": "100015",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "",
      "reference": "Scan Rule Help",
      "description": "Find possible vulnerable entry points using HUNT Methodology ( https://github.com/bugcrowd/HUNT) .",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/HUNT.py"
      ],
      "alert_name": "HUNT Methodology",
      "source_url": "https://www.zaproxy.org/docs/alerts/100015/",
      "canonical_id": "b8938703-6ef5-562d-b874-ea4c02529429"
    },
    {
      "alert_id": "10031",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "20",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html",
      "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
      "remediation": "Validate all input and sanitize output it before writing to any HTML attributes.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/UserControlledHTMLAttributesScanRule.java"
      ],
      "alert_name": "User Controllable HTML Element Attribute (Potential XSS)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10031/",
      "canonical_id": "1513e427-6e26-5cc5-83ed-adb92a40de57"
    },
    {
      "alert_id": "10102",
      "alert_type": "Tool",
      "status": "alpha",
      "risk": "High",
      "cweid": "205",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/284.html https://cwe.mitre.org/data/definitions/285.html",
      "description": "Insufficient Authorization results when an application does not perform adequate authorization checks to ensure that the user is performing a function or accessing data in a manner consistent with the security policy. Authorization procedures should enforce what a user, service or application is permitted to do. When a user is authenticated to a web site, it does not necessarily mean that the user should have full access to all content and functionality. Insufficient Function Authorization Many applications grant different application functionality to different users. A news site will allows users to view news stories, but not publish them. An accounting system will have different permissions for an Accounts Payable clerk and an Accounts Receivable clerk. Insufficient Function Authorization happens when an application does not prevent users from accessing application functionality in violation of security policy. A very visible example was the 2005 hack of the Harvard Business School\u2019s application process. An authorization failure allowed users to view their own data when they should not have been allowed to access that part of the web site. Insufficient Data Authorization Many applications expose underlying data identifiers in a URL. For example, when accessing a medical record on a system one might have a URL such as: https://example.com/RecordView?id=12345 If the application does not check that the authenticated user ID has read rights, then it could display data to the user that the user should not see. Insufficient Data Authorization is more common than Insufficient Function Authorization because programmers generally have complete knowledge of application functionality, but do not always have a complete mapping of all data that the application will access. Programmers often have tight control over function authorization mechanisms, but rely on other systems such as databases to perform data authorization.",
      "remediation": "Phases: Architecture and Design; Operation Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.  Phase: Architecture and Design\t Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/accessControl/src/main/java/org/zaproxy/zap/extension/accessControl/ExtensionAccessControl.java"
      ],
      "alert_name": "Access Control Issue - Improper Authorization",
      "source_url": "https://www.zaproxy.org/docs/alerts/10102/",
      "canonical_id": "992f99e0-e5d4-5528-9d84-724988d88d90"
    },
    {
      "alert_id": "10015",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "525",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control https://grayduck.mn/2021/09/13/cache-control-recommendations/",
      "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
      "remediation": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CacheControlScanRule.java"
      ],
      "alert_name": "Re-examine Cache-control Directives",
      "source_url": "https://www.zaproxy.org/docs/alerts/10015/",
      "canonical_id": "19bb48c2-ce36-59f8-8efd-f3b643025a25"
    },
    {
      "alert_id": "40031",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "79",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/xss/ https://cwe.mitre.org/data/definitions/79.html",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user\u2019s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user\u2019s browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise. There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim\u2019s knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user\u2019s browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it\u2019s stored for a period of time. Examples of an attacker\u2019s favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "remediation": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.  Phases: Implementation; Architecture and Design Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.  Phase: Architecture and Design For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.  Phase: Implementation For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.  To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.  Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/xss/"
      ],
      "alert_name": "Out of Band XSS",
      "source_url": "https://www.zaproxy.org/docs/alerts/40031/",
      "canonical_id": "2a5aa9b1-ee4f-58aa-bafc-76125a5e0efd"
    },
    {
      "alert_id": "100021",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "High",
      "cweid": "327",
      "reference": "Scan Rule Help https://docs.telerik.com/devtools/aspnet-ajax/knowledge-base/common-cryptographic-weakness",
      "description": "A request has been made that appears to conform to poor cryptography used by Telerik UI for ASP.NET AJAX prior to v2017.2.621.\nAn attacker could manipulate the value of the dp parameter to possibly learn the machine key and upload arbitrary files, which could then lead to the compromise of ASP.NET ViewStates and arbitrary code execution respectively.\nCVE-2017-9248 has a CVSSv3 score of 9.8.",
      "remediation": "See https://docs.telerik.com/devtools/aspnet-ajax/knowledge-base/common-cryptographic-weakness for update/mitigation guidance.",
      "gitsrc": [
        "https://docs.telerik.com/devtools/aspnet-ajax/knowledge-base/common-cryptographic-weakness"
      ],
      "alert_name": "Telerik UI for ASP.NET AJAX Cryptographic Weakness (CVE-2017-9248)",
      "source_url": "https://www.zaproxy.org/docs/alerts/100021/",
      "canonical_id": "29a50a25-4ea9-5ebd-9b49-e66a428d29a2"
    },
    {
      "alert_id": "40040-1",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Informational",
      "cweid": "942",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS https://portswigger.net/web-security/cors",
      "description": "Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).",
      "remediation": "If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CorsScanRule.java"
      ],
      "alert_name": "CORS Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/40040-1/",
      "canonical_id": "d2bcd134-1065-5ed9-a9de-64207126ab91"
    },
    {
      "alert_id": "90005-4",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-User",
      "description": "Specifies if a navigation request was initiated by a user.",
      "remediation": "Ensure that Sec-Fetch-User header is included in user initiated requests.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-User Header is Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-4/",
      "canonical_id": "372016c9-17cd-5c0d-bec6-abbc1aed5ad8"
    },
    {
      "alert_id": "0",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "548",
      "reference": "Scan Rule Help https://httpd.apache.org/docs/mod/core.html#options",
      "description": "It is possible to view the directory listing. Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.",
      "remediation": "Disable directory browsing. If this is required, make sure the listed files does not induce risks.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/DirectoryBrowsingScanRule.java"
      ],
      "alert_name": "Directory Browsing",
      "source_url": "https://www.zaproxy.org/docs/alerts/0/",
      "canonical_id": "43ba783e-96fc-527c-b43a-8335bf71a399"
    },
    {
      "alert_id": "10032-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "642",
      "reference": "Scan Rule Help",
      "description": "The following potential IP addresses were found being serialized in the viewstate field:",
      "remediation": "Verify the provided information isn't confidential.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
      ],
      "alert_name": "Potential IP Addresses Found in the Viewstate",
      "source_url": "https://www.zaproxy.org/docs/alerts/10032-1/",
      "canonical_id": "4a7fa1c2-5c05-5c35-b308-551b493fda4e"
    },
    {
      "alert_id": "10048-2",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "78",
      "reference": "Scan Rule Help https://nvd.nist.gov/vuln/detail/CVE-2014-6271 https://www.troyhunt.com/everything-you-need-to-know-about2/",
      "description": "The server is running a version of the Bash shell that allows remote attackers to execute arbitrary code.",
      "remediation": "Update Bash on the server to the latest version.",
      "gitsrc": [
        "https://nvd.nist.gov/vuln/detail/CVE-2014-6271"
      ],
      "alert_name": "Remote Code Execution - Shell Shock",
      "source_url": "https://www.zaproxy.org/docs/alerts/10048-2/",
      "canonical_id": "be857f65-abf4-50e9-ae60-2e9344e85d3e"
    },
    {
      "alert_id": "20017",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "20",
      "reference": "Scan Rule Help https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/89.html",
      "description": "Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped \u201c=\u201d character, enabling PHP source code disclosure, and arbitrary code execution. In this case, the contents of the PHP file were served directly to the web browser. This output will typically contain PHP, although it may also contain straight HTML.",
      "remediation": "Upgrade to the latest stable version of PHP, or use the Apache web server and the mod_rewrite module to filter out malicious requests using the \"RewriteCond\" and \"RewriteRule\" directives.",
      "gitsrc": [
        "https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation"
      ],
      "alert_name": "Source Code Disclosure - CVE-2012-1823",
      "source_url": "https://www.zaproxy.org/docs/alerts/20017/",
      "canonical_id": "6ce2e575-0553-5c8c-8d38-2c35c1cc85ed"
    },
    {
      "alert_id": "40040-2",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "942",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS https://portswigger.net/web-security/cors",
      "description": "This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim\u2019s user agent.\nIn order to perform authenticated AJAX queries, the server must specify the header \u201cAccess-Control-Allow-Credentials: true\u201d and the \u201cAccess-Control-Allow-Origin\u201d header must be set to null or the malicious page\u2019s domain. Even if this misconfiguration doesn\u2019t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).\nA malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).",
      "remediation": "If a web resource contains sensitive information, the origin should be properly specified in the Access-Control-Allow-Origin header. Only trusted websites needing this resource should be specified in this header, with the most secured protocol supported.",
      "gitsrc": [
        "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
      ],
      "alert_name": "CORS Misconfiguration",
      "source_url": "https://www.zaproxy.org/docs/alerts/40040-2/",
      "canonical_id": "8e10f24c-ebb3-5ab2-9a51-3fe001ef45ec"
    },
    {
      "alert_id": "100022",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "434",
      "reference": "Scan Rule Help",
      "description": "The presence of a file upload form can lead to various security vulnerabilities, such as uploading malicious files or overwriting existing files, if proper validation and restrictions are not implemented. This can result in unauthorized code execution, data breaches, or denial of service attacks.",
      "remediation": "Implement strict validation and restrictions on uploaded files, including file type, size, and content. Use security measures like antivirus scanning and file storage outside the web root.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Upload%20form%20discovery.js"
      ],
      "alert_name": "Upload Form Discovered",
      "source_url": "https://www.zaproxy.org/docs/alerts/100022/",
      "canonical_id": "edd8623b-9a49-5ccd-931c-e84b1fd66310"
    },
    {
      "alert_id": "90005-8",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-User",
      "description": "Specifies if a navigation request was initiated by a user.",
      "remediation": "Sec-Fetch-User header must have the value set to ?1.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-User Header Has an Invalid Value",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-8/",
      "canonical_id": "b849d444-9d8f-554d-9044-c43e85ec1cc4"
    },
    {
      "alert_id": "10035-7",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "319",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc6797#section-6.1",
      "description": "A HTTP Strict Transport Security (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).",
      "remediation": "Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate format.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-7/",
      "canonical_id": "c10c527e-4ba0-5171-84da-be0c16949334"
    },
    {
      "alert_id": "40013",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "384",
      "reference": "Scan Rule Help https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication https://owasp.org/www-community/attacks/Session_fixation https://acrossecurity.com/papers/session_fixation.pdf https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
      "description": "Session Fixation may be possible. If this issue occurs with a login URL (where the user authenticates themselves to the application), then the URL may be given by an attacker, along with a fixed session id, to a victim, in order to later assume the identity of the victim using the given session id. If the issue occurs with a non-login page, the URL and fixed session id may only be used by an attacker to track an unauthenticated user\u2019s actions. If the vulnerability occurs on a cookie field or a form field (POST parameter) rather than on a URL (GET) parameter, then some other vulnerability may also be required in order to set the cookie field on the victim\u2019s browser, to allow the vulnerability to be exploited.",
      "remediation": "1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application. 2) The server should always create a new session id upon authentication, regardless of whether a session is already in place. 3) Bind the session id to some identifiable client attribute combination, such as IP address, SSL client certificate. 4) Sessions, when destroyed, must be destroyed on the server, as well as on the client. 5) Implement a logout mechanism which will destroy all previous sessions for the client. 6) Implement absolute session timeouts. 7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/SessionFixationScanRule.java"
      ],
      "alert_name": "Session Fixation",
      "source_url": "https://www.zaproxy.org/docs/alerts/40013/",
      "canonical_id": "7382a996-4fd7-5fcb-9d01-20c70109df19"
    },
    {
      "alert_id": "10044-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "201",
      "reference": "Scan Rule Help",
      "description": "The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).",
      "remediation": "Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/BigRedirectsScanRule.java"
      ],
      "alert_name": "Big Redirect Detected (Potential Sensitive Information Leak)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10044-1/",
      "canonical_id": "3d458f18-68ac-5a3c-9ac1-dab8287c301c"
    },
    {
      "alert_id": "10054-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "1275",
      "reference": "Scan Rule Help https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site",
      "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a \u2018cross-site\u2019 request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
      "remediation": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java"
      ],
      "alert_name": "Cookie without SameSite Attribute",
      "source_url": "https://www.zaproxy.org/docs/alerts/10054-1/",
      "canonical_id": "3a64c910-09d7-56a9-9b88-4c668fa0b276"
    },
    {
      "alert_id": "10055-6",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: style-src unsafe-inline",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-6/",
      "canonical_id": "ac6c35f0-dc80-5840-9245-9dd834953039"
    },
    {
      "alert_id": "40040",
      "alert_type": "Active",
      "status": "beta",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CorsScanRule.java"
      ],
      "alert_name": "CORS Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/40040/",
      "canonical_id": "0dd7fc3d-3f81-5713-83e1-71d9f14e52be"
    },
    {
      "alert_id": "100023",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "200",
      "reference": "Scan Rule Help",
      "description": "The web/application server is leaking information via one or more \u2018X-Powered-By\u2019 HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to suppress 'X-Powered-By' headers.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/X-Powered-By_header_checker.js"
      ],
      "alert_name": "Information Disclosure - X-Powered-By Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/100023/",
      "canonical_id": "a11ce478-f2de-5a3a-bdb2-e0c1e1104a13"
    },
    {
      "alert_id": "10063-2",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Low",
      "cweid": "16",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy https://scotthelme.co.uk/goodbye-feature-policy-and-hello-permissions-policy/",
      "description": "The header has now been renamed to Permissions-Policy.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header instead of the Feature-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/PermissionsPolicyScanRule.java"
      ],
      "alert_name": "Deprecated Feature Policy Header Set",
      "source_url": "https://www.zaproxy.org/docs/alerts/10063-2/",
      "canonical_id": "2227de19-c504-58e5-a622-e742d4616034"
    },
    {
      "alert_id": "10109",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "",
      "reference": "Scan Rule Help",
      "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
      "remediation": "This is an informational alert and so no changes are required.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ModernAppDetectionScanRule.java"
      ],
      "alert_name": "Modern Web Application",
      "source_url": "https://www.zaproxy.org/docs/alerts/10109/",
      "canonical_id": "f517b5da-83e7-5e3c-8229-bc773d262a8f"
    },
    {
      "alert_id": "40009",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "97",
      "reference": "Scan Rule Help https://httpd.apache.org/docs/current/howto/ssi.html",
      "description": "Certain parameters may cause Server Side Include commands to be executed. This may allow database connection or arbitrary code to be executed.",
      "remediation": "Do not trust client side input and enforce a tight check in the server side. Disable server side includes. Refer to manual to disable Sever Side Include. Use least privilege to run your web server or application server. For Apache, disable the following: Options Indexes FollowSymLinks Includes AddType application/x-httpd-cgi .cgi AddType text/x-server-parsed-html .html.",
      "gitsrc": [
        "https://httpd.apache.org/docs/current/howto/ssi.html"
      ],
      "alert_name": "Server Side Include",
      "source_url": "https://www.zaproxy.org/docs/alerts/40009/",
      "canonical_id": "8c1922d9-6d96-5abe-a794-31dd4c9af6e2"
    },
    {
      "alert_id": "90027",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Informational",
      "cweid": "205",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/205.html",
      "description": "Repeated GET requests: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/SlackerCookieScanRule.java"
      ],
      "alert_name": "Cookie Slack Detector",
      "source_url": "https://www.zaproxy.org/docs/alerts/90027/",
      "canonical_id": "0fb2f64e-0ebd-5543-be1e-0451ed51ec9d"
    },
    {
      "alert_id": "40043-2",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "117",
      "reference": "Scan Rule Help https://www.lunasec.io/docs/blog/log4j-zero-day/ https://nvd.nist.gov/vuln/detail/CVE-2021-45046",
      "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allow attackers to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments.",
      "remediation": "Upgrade Log4j2 to version 2.17.1 or newer.",
      "gitsrc": [
        "https://www.lunasec.io/docs/blog/log4j-zero-day/"
      ],
      "alert_name": "Log4Shell (CVE-2021-45046)",
      "source_url": "https://www.zaproxy.org/docs/alerts/40043-2/",
      "canonical_id": "b6341a78-582c-536f-aacd-ee2a1251f8c6"
    },
    {
      "alert_id": "100018",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Medium",
      "cweid": "20",
      "reference": "Scan Rule Help",
      "description": "Potential RPO (Relative Path Overwrite) found. RPO allows attackers to manipulate URLs to include unintended paths, potentially leading to the execution of malicious scripts or the disclosure of sensitive information.",
      "remediation": "Use absolute paths in URLs and resources to prevent manipulation. Validate and sanitize all user inputs that are used to construct URLs.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/RPO.js"
      ],
      "alert_name": "Relative Path Overwrite",
      "source_url": "https://www.zaproxy.org/docs/alerts/100018/",
      "canonical_id": "cfb3f2f7-52c2-573c-b33f-6a5470bed062"
    },
    {
      "alert_id": "90005-7",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Dest",
      "description": "Specifies how and where the data would be used. For instance, if the value is audio, then the requested resource must be audio data and not any other type of resource.",
      "remediation": "Sec-Fetch-Dest header must have one of the following values: audio, audioworklet, document, embed, empty, font, frame, iframe, image, manifest, object, paintworklet, report, script, serviceworker, sharedworker, style, track, video, worker, xslt.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-Dest Header Has an Invalid Value",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-7/",
      "canonical_id": "3ab38522-63ef-5d81-b36a-fa7a32df5d8e"
    },
    {
      "alert_id": "10027",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "615",
      "reference": "Scan Rule Help",
      "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
      "remediation": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InformationDisclosureSuspiciousCommentsScanRule.java"
      ],
      "alert_name": "Information Disclosure - Suspicious Comments",
      "source_url": "https://www.zaproxy.org/docs/alerts/10027/",
      "canonical_id": "8c0b01c1-f832-51a8-83e2-c7246c98ad1f"
    },
    {
      "alert_id": "10035-5",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "319",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc6797#section-6.2",
      "description": "A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).",
      "remediation": "Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-5/",
      "canonical_id": "56ca8e16-93f1-5a34-a7ca-57b6352ffc66"
    },
    {
      "alert_id": "90005-3",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Dest",
      "description": "Specifies how and where the data would be used. For instance, if the value is audio, then the requested resource must be audio data and not any other type of resource.",
      "remediation": "Ensure that Sec-Fetch-Dest header is included in request headers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-Dest Header is Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-3/",
      "canonical_id": "38e71f84-2179-5ad7-9026-e5ff44fb6bc5"
    },
    {
      "alert_id": "10115-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "High",
      "cweid": "829",
      "reference": "Scan Rule Help https://sansec.io/research/polyfill-supply-chain-attack https://x.com/triblondon/status/1761852117579427975",
      "description": "The page includes one or more script files loaded from one of the \u2018polyfill\u2019 domains.\nThese are not associated with the polyfill.js library and are known to serve malicious content.",
      "remediation": "Change all scripts to use a known good source based on their documentation.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/PolyfillCdnScriptScanRule.java"
      ],
      "alert_name": "Script Served From Malicious Domain (polyfill)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10115-1/",
      "canonical_id": "7f43214b-100d-50f5-8c91-9b806214adb1"
    },
    {
      "alert_id": "10099",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Medium",
      "cweid": "540",
      "reference": "Scan Rule Help https://www.wsj.com/articles/BL-CIOB-2999",
      "description": "Application Source Code was disclosed by the web server. - PHP",
      "remediation": "Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server.",
      "gitsrc": [
        "https://www.wsj.com/articles/BL-CIOB-2999"
      ],
      "alert_name": "Source Code Disclosure - PHP",
      "source_url": "https://www.zaproxy.org/docs/alerts/10099/",
      "canonical_id": "e1d02c72-8bc9-5024-bdd2-739c14799403"
    },
    {
      "alert_id": "10033",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "548",
      "reference": "Scan Rule Help https://cwe.mitre.org/data/definitions/548.html",
      "description": "It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files, backup source files, etc., which can be accessed to reveal sensitive information.",
      "remediation": "Configure the web server to disable directory browsing.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/DirectoryBrowsingScanRule.java"
      ],
      "alert_name": "Directory Browsing",
      "source_url": "https://www.zaproxy.org/docs/alerts/10033/",
      "canonical_id": "23b069b3-7e40-57ea-bf2a-f4178c99982d"
    },
    {
      "alert_id": "90005-5",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "352",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site",
      "description": "Specifies the relationship between request initiator\u2019s origin and target\u2019s origin.",
      "remediation": "Sec-Fetch-Site header must have one of the following values: same-origin, same-site, cross-origin, or none.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/FetchMetadataRequestHeadersScanRule.java"
      ],
      "alert_name": "Sec-Fetch-Site Header Has an Invalid Value",
      "source_url": "https://www.zaproxy.org/docs/alerts/90005-5/",
      "canonical_id": "6ae686f7-37dd-5262-8976-47419725c15a"
    },
    {
      "alert_id": "100019",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "200",
      "reference": "Scan Rule Help",
      "description": "The web/application server is leaking version information via the \u2018Server\u2019 HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server  is subject to.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the 'Server' header  or provide generic details.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Server%20Header%20Disclosure.js"
      ],
      "alert_name": "Information Disclosure - Server Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/100019/",
      "canonical_id": "3f45d146-2a7e-5ad8-85de-76d01885721f"
    },
    {
      "alert_id": "10032-4",
      "alert_type": "Passive",
      "status": "release",
      "risk": "High",
      "cweid": "642",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff649308(v=pandp.10)",
      "description": "This website uses ASP.NET\u2019s Viewstate but maybe without any MAC.",
      "remediation": "Ensure the MAC is set for all pages on this website.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
      ],
      "alert_name": "Viewstate without MAC Signature (Unsure)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10032-4/",
      "canonical_id": "22af64a8-c261-515d-b639-e1464e4af43b"
    },
    {
      "alert_id": "10038",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyMissingScanRule.java"
      ],
      "alert_name": "Content Security Policy (CSP) Header Not Set",
      "source_url": "https://www.zaproxy.org/docs/alerts/10038/",
      "canonical_id": "885e95b8-55f0-5161-8cbc-27793d3048df"
    },
    {
      "alert_id": "100004",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "200",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_CSP_violation_reports",
      "description": "",
      "remediation": "Site owner will be notified at each policies violations, so, start by analyzing if a real monitoring of the notifications is in place before to use fuzzing or to be more aggressive.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/detect_csp_notif_and_reportonly.js"
      ],
      "alert_name": "Content Security Policy Violations Reporting Enabled",
      "source_url": "https://www.zaproxy.org/docs/alerts/100004/",
      "canonical_id": "edfb1434-70b7-5391-b105-0e355cb0fe56"
    },
    {
      "alert_id": "10029",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "565",
      "reference": "Scan Rule Help https://en.wikipedia.org/wiki/HTTP_cookie https://cwe.mitre.org/data/definitions/565.html",
      "description": "This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.",
      "remediation": "Do not allow user input to control cookie names and values. If some query string parameters must be set in cookie values, be sure to filter out semicolon's that can serve as name/value pair delimiters.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/UserControlledCookieScanRule.java"
      ],
      "alert_name": "Cookie Poisoning",
      "source_url": "https://www.zaproxy.org/docs/alerts/10029/",
      "canonical_id": "ab04666c-ebc0-5724-a422-dba3bf1db9e8"
    },
    {
      "alert_id": "10094-3",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "200",
      "reference": "Scan Rule Help https://projects.webappsec.org/w/page/13246936/Information%20Leakage",
      "description": "Base64 encoded data was disclosed by the application/web server. Note: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).",
      "remediation": "Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.",
      "gitsrc": [
        "https://projects.webappsec.org/w/page/13246936/Information%20Leakage"
      ],
      "alert_name": "Base64 Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/10094-3/",
      "canonical_id": "40c7c428-627c-5e7d-98ba-9271e954bb9d"
    },
    {
      "alert_id": "100010",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "327",
      "reference": "Scan Rule Help",
      "description": "A hash was discovered in the HTTP response body.",
      "remediation": "Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Find%20Hashes.js"
      ],
      "alert_name": "Information Disclosure - Hash",
      "source_url": "https://www.zaproxy.org/docs/alerts/100010/",
      "canonical_id": "44baa1d9-a75a-54f0-8631-ee89f1c77b5b"
    },
    {
      "alert_id": "30001",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "120",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Buffer_overflow_attack",
      "description": "Buffer overflow errors are characterized by the overwriting of memory spaces of the background web process, which should have never been modified intentionally or unintentionally. Overwriting values of the IP (Instruction Pointer), BP (Base Pointer) and other registers causes exceptions, segmentation faults, and other process errors to occur. Usually these errors end execution of the application in an unexpected way.",
      "remediation": "Rewrite the background program using proper return length checking. This will require a recompile of the background executable.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/BufferOverflowScanRule.java"
      ],
      "alert_name": "Buffer Overflow",
      "source_url": "https://www.zaproxy.org/docs/alerts/30001/",
      "canonical_id": "6efdb0f7-fe35-5778-9989-d65930dd238a"
    },
    {
      "alert_id": "90001",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "642",
      "reference": "Scan Rule Help https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt",
      "description": "The response at the following URL contains a ViewState value that has no cryptographic protections.",
      "remediation": "Secure VIEWSTATE with a MAC specific to your environment.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureJsfViewStatePassiveScanRule.java"
      ],
      "alert_name": "Insecure JSF ViewState",
      "source_url": "https://www.zaproxy.org/docs/alerts/90001/",
      "canonical_id": "336945af-a076-511b-b4ce-75343bee2c8b"
    },
    {
      "alert_id": "10107",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "20",
      "reference": "Scan Rule Help https://httpoxy.org/",
      "description": "The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.Httpoxy typically affects code running in CGI or CGI like environments.\nThis may allow attackers to: Proxy the outgoing HTTP requests made by the web application Direct the server to open outgoing connections to an address and port of their choosing or Tie up server resources by forcing the vulnerable software to use a malicious proxy.",
      "remediation": "The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.",
      "gitsrc": [
        "https://httpoxy.org/"
      ],
      "alert_name": "Httpoxy - Proxy Header Misuse",
      "source_url": "https://www.zaproxy.org/docs/alerts/10107/",
      "canonical_id": "d4f734dd-54f1-5bfe-a483-8a8a611dcd4c"
    },
    {
      "alert_id": "100017",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "",
      "reference": "Scan Rule Help",
      "description": "A query string or form has been detected in the HTTP response body. This indicates that this may not be a static site.",
      "remediation": "If this is not a static site then ignore or disable this rule.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/Report%20non%20static%20sites.js"
      ],
      "alert_name": "Non Static Site Detected",
      "source_url": "https://www.zaproxy.org/docs/alerts/100017/",
      "canonical_id": "430eae03-3c57-5e9f-8ceb-d6bba37d4341"
    },
    {
      "alert_id": "10048",
      "alert_type": "Active",
      "status": "beta",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://www.zaproxy.org/docs/alerts/10048-2"
      ],
      "alert_name": "Remote Code Execution - Shell Shock",
      "source_url": "https://www.zaproxy.org/docs/alerts/10048/",
      "canonical_id": "ae5d489a-5b8b-51ac-9bee-d77694cfbd93"
    },
    {
      "alert_id": "7",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "98",
      "reference": "Scan Rule Help https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.2-Testing_for_Remote_File_Inclusion https://cwe.mitre.org/data/definitions/98.html",
      "description": "Remote File Include (RFI) is an attack technique used to exploit \u201cdynamic file include\u201d mechanisms in web applications. When web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code. Almost all web application frameworks support file inclusion. File inclusion is mainly used for packaging common code into separate files that are later referenced by main application modules. When a web application references an include file, the code in this file may be executed implicitly or explicitly by calling specific procedures. If the choice of module to load is based on elements from the HTTP request, the web application might be vulnerable to RFI.\nAn attacker can use RFI for:\n* Running malicious code on the server: any code in the included malicious files will be run by the server. If the file include is not executed using some wrapper, code in include files is executed in the context of the server user. This could lead to a complete system compromise.\n* Running malicious code on clients: the attacker\u2019s malicious code can manipulate the content of the response sent to the client. The attacker can embed malicious code in the response that will be run by the client (for example, JavaScript to steal the client session cookies). PHP is particularly vulnerable to RFI attacks due to the extensive use of \u201cfile includes\u201d in PHP programming and due to default server configurations that increase susceptibility to an RFI attack.",
      "remediation": "Phase: Architecture and Design When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability.  Phases: Architecture and Design; Operation Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails. For PHP, the interpreter offers restrictions such as open basedir or safe mode which can make it more difficult for an attacker to escape out of the application. Also consider Suhosin, a hardened PHP extension, which includes various options that disable some of the more dangerous PHP features.  Phase: Implementation Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\" For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use an allow list of allowable file extensions, which will help to avoid CWE-434.  Phases: Architecture and Design; Operation Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce your attack surface.  Phases: Architecture and Design; Implementation Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.",
      "gitsrc": [
        "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.2-Testing_for_Remote_File_Inclusion"
      ],
      "alert_name": "Remote File Inclusion",
      "source_url": "https://www.zaproxy.org/docs/alerts/7/",
      "canonical_id": "5f3888ce-ede6-5fc1-aa6d-635f2cb3de0a"
    },
    {
      "alert_id": "10020-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "1021",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc7034",
      "description": "X-Frame-Options (XFO) headers were found, a response with multiple XFO header entries may not be predictably treated by all user-agents.",
      "remediation": "Ensure only a single X-Frame-Options header is present in the response.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/AntiClickjackingScanRule.java"
      ],
      "alert_name": "Multiple X-Frame-Options Header Entries",
      "source_url": "https://www.zaproxy.org/docs/alerts/10020-2/",
      "canonical_id": "90a94fef-265a-5615-abaf-c6cfb95462a9"
    },
    {
      "alert_id": "10035-6",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "319",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc6797#section-8.5",
      "description": "A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).",
      "remediation": "Do not attempt to set HTTP Strict Transport Security (HSTS) via a META tag.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Defined via META (Non-compliant with Spec)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-6/",
      "canonical_id": "e05b46e0-8422-5e7d-8e2a-1f11d09bcb0e"
    },
    {
      "alert_id": "40043-1",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "117",
      "reference": "Scan Rule Help https://www.lunasec.io/docs/blog/log4j-zero-day/ https://nvd.nist.gov/vuln/detail/CVE-2021-44228",
      "description": "Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default.",
      "remediation": "Upgrade Log4j2 to version 2.17.1 or newer. In previous releases (>2.10) this behavior can be mitigated by setting system property \"log4j2.formatMsgNoLookups\" to \"true\" or by removing the JndiLookup class from the classpath (example: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class). Java 8u121 (see https://www.oracle.com/java/technologies/javase/8u121-relnotes.html) protects against remote code execution by defaulting \"com.sun.jndi.rmi.object.trustURLCodebase\" and \"com.sun.jndi.cosnaming.object.trustURLCodebase\" to \"false\".",
      "gitsrc": [
        "https://www.lunasec.io/docs/blog/log4j-zero-day/"
      ],
      "alert_name": "Log4Shell (CVE-2021-44228)",
      "source_url": "https://www.zaproxy.org/docs/alerts/40043-1/",
      "canonical_id": "1d325754-ba36-513f-a64c-7f2a924af221"
    },
    {
      "alert_id": "10055-5",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: script-src unsafe-inline",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-5/",
      "canonical_id": "428870da-be27-5f4b-85c6-c669d92a9f7e"
    },
    {
      "alert_id": "110001",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "209",
      "reference": "",
      "description": "This payload contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application.",
      "remediation": "Review the error payloads which are piped directly to WebSockets. Handle the related exceptions. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/Application%20Error%20Scanner.js"
      ],
      "alert_name": "Application Error Disclosure via WebSockets",
      "source_url": "https://www.zaproxy.org/docs/alerts/110001/",
      "canonical_id": "633e6bb7-442b-58a4-ace4-ac19580782c8"
    },
    {
      "alert_id": "10003",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "1395",
      "reference": "Scan Rule Help",
      "description": "The identified library ExampleLibrary, version x.y.z is vulnerable.",
      "remediation": "Please upgrade to the latest version of ExampleLibrary.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/retire/src/main/java/org/zaproxy/addon/retire/RetireScanRule.java"
      ],
      "alert_name": "Vulnerable JS Library",
      "source_url": "https://www.zaproxy.org/docs/alerts/10003/",
      "canonical_id": "6135d024-1121-551e-a1ca-ae0e68be18b2"
    },
    {
      "alert_id": "40022",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "89",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "SQL injection may be possible.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionPostgreScanRule.java"
      ],
      "alert_name": "SQL Injection - PostgreSQL",
      "source_url": "https://www.zaproxy.org/docs/alerts/40022/",
      "canonical_id": "14a6f27d-8bb7-5834-9799-4049cc30a6be"
    },
    {
      "alert_id": "40015",
      "alert_type": "Active",
      "status": "alpha",
      "risk": "High",
      "cweid": "90",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/LDAP_Injection https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html",
      "description": "LDAP Injection may be possible. It may be possible for an attacker to bypass authentication controls, and to view and modify arbitrary data in the LDAP directory.",
      "remediation": "Validate and/or escape all user input before using it to create an LDAP query.  In particular, the following characters (or combinations) should be deny listed: & | ! < > = ~= >= <= * ( ) , + - \" ' ; \\ / NUL character",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesAlpha/src/main/java/org/zaproxy/zap/extension/ascanrulesAlpha/LdapInjectionScanRule.java"
      ],
      "alert_name": "LDAP Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/40015/",
      "canonical_id": "088ef10a-60c4-5b1c-9bb3-62ffba6d6cc9"
    },
    {
      "alert_id": "10104",
      "alert_type": "Active",
      "status": "release",
      "risk": "Informational",
      "cweid": "",
      "reference": "Scan Rule Help https://owasp.org/wstg",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "remediation": "",
      "gitsrc": [
        "https://owasp.org/wstg"
      ],
      "alert_name": "User Agent Fuzzer",
      "source_url": "https://www.zaproxy.org/docs/alerts/10104/",
      "canonical_id": "7f4a00df-173f-586f-9586-567dee8e5614"
    },
    {
      "alert_id": "10019-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "345",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)",
      "description": "The Content-Type header was either missing or empty.",
      "remediation": "Ensure each page is setting the specific and appropriate content-type value for the content being delivered.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentTypeMissingScanRule.java"
      ],
      "alert_name": "Content-Type Header Empty",
      "source_url": "https://www.zaproxy.org/docs/alerts/10019-2/",
      "canonical_id": "6d27f662-a75e-5bab-855b-6462ab260e01"
    },
    {
      "alert_id": "10040",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "311",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
      "description": "The page includes mixed content, that is content accessed via HTTP instead of HTTPS.",
      "remediation": "A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS. The page must not contain any content that is transmitted over unencrypted HTTP. This includes content from third party sites.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/MixedContentScanRule.java"
      ],
      "alert_name": "Secure Pages Include Mixed Content",
      "source_url": "https://www.zaproxy.org/docs/alerts/10040/",
      "canonical_id": "a3845ed3-c0b4-5f0e-b709-cfb56de3470a"
    },
    {
      "alert_id": "20019-2",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "601",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/601.html",
      "description": "URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"https://www.example.com/\". Features such as the ESAPI AccessReferenceMap provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ExternalRedirectScanRule.java"
      ],
      "alert_name": "External Redirect",
      "source_url": "https://www.zaproxy.org/docs/alerts/20019-2/",
      "canonical_id": "07f57197-c5fa-56fe-b6ef-f5a4c9b132b8"
    },
    {
      "alert_id": "10054-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "1275",
      "reference": "Scan Rule Help https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site",
      "description": "A cookie has been set with its SameSite attribute set to \u201cnone\u201d, which means that the cookie can be sent as a result of a \u2018cross-site\u2019 request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
      "remediation": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java"
      ],
      "alert_name": "Cookie with SameSite Attribute None",
      "source_url": "https://www.zaproxy.org/docs/alerts/10054-2/",
      "canonical_id": "c403951b-8d57-52bc-b117-ff6a8cb3f949"
    },
    {
      "alert_id": "40045",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "78",
      "reference": "Scan Rule Help https://nvd.nist.gov/vuln/detail/CVE-2022-22965 https://www.rapid7.com/blog/post/2022/03/30/spring4shell-zero-day-vulnerability-in-spring-framework/ https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement#vulnerability https://tanzu.vmware.com/security/cve-2022-22965",
      "description": "The application appears to be vulnerable to CVE-2022-22965 (otherwise known as Spring4Shell) - remote code execution (RCE) via data binding.",
      "remediation": "Upgrade Spring Framework to versions 5.3.18, 5.2.20, or newer.",
      "gitsrc": [
        "https://nvd.nist.gov/vuln/detail/CVE-2022-22965"
      ],
      "alert_name": "Spring4Shell",
      "source_url": "https://www.zaproxy.org/docs/alerts/40045/",
      "canonical_id": "68685ed7-79ad-5694-8346-c6272adeadd3"
    },
    {
      "alert_id": "100034",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "200",
      "reference": "Scan Rule Help",
      "description": "A Google API Key was found in the HTTP response body.",
      "remediation": "Ensure the API key is not overly permissive.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/google_api_keys_finder.js"
      ],
      "alert_name": "Information Disclosure - Google API Key",
      "source_url": "https://www.zaproxy.org/docs/alerts/100034/",
      "canonical_id": "c76e3c2c-c1fb-52a4-bd0f-6a155b41cda9"
    },
    {
      "alert_id": "110008",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "200",
      "reference": "",
      "description": "The response appears to contain suspicious comments which may help an attacker.",
      "remediation": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/XML%20Comments%20Disclosure.js"
      ],
      "alert_name": "Information Disclosure - Suspicious Comments in XML via WebSocket",
      "source_url": "https://www.zaproxy.org/docs/alerts/110008/",
      "canonical_id": "3b665059-b90a-5fde-a11c-34d9e30148a5"
    },
    {
      "alert_id": "10051",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "20",
      "reference": "Scan Rule Help https://arxiv.org/abs/1811.00917 https://hsivonen.fi/doctype/ https://www.w3schools.com/tags/tag_base.asp",
      "description": "The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct \u201crelative path\u201d for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the \u201ccross-content\u201d response in a permissive manner, or can be tricked into permissively parsing the \u201ccross-content\u201d response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.",
      "remediation": "Web servers and frameworks should be updated to be configured to not serve responses to ambiguous URLs in such a way that the relative path of such URLs could be mis-interpreted by components on either the client side, or server side. Within the application, the correct use of the \"<base>\" HTML tag in the HTTP response will unambiguously specify the base URL for all relative URLs in the document. Use the \"Content-Type\" HTTP response header to make it harder for the attacker to force the web browser to mis-interpret the content type of the response. Use the \"X-Content-Type-Options: nosniff\" HTTP response header to prevent the web browser from \"sniffing\" the content type of the response. Use a modern DOCTYPE such as \"<!doctype html>\" to prevent the page from being rendered in the web browser using \"Quirks Mode\", since this results in the content type being ignored by the web browser. Specify the \"X-Frame-Options\" HTTP response header to prevent Quirks Mode from being enabled in the web browser using framing attacks.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/RelativePathConfusionScanRule.java"
      ],
      "alert_name": "Relative Path Confusion",
      "source_url": "https://www.zaproxy.org/docs/alerts/10051/",
      "canonical_id": "d647a1cc-7d64-56da-8e31-be30fe73244b"
    },
    {
      "alert_id": "10049-3",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Informational",
      "cweid": "524",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc7234 https://datatracker.ietf.org/doc/html/rfc7231 https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html",
      "description": "The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \u201cshared\u201d caching servers such as \u201cproxy\u201d caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.",
      "remediation": "Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user: Cache-Control: no-cache, no-store, must-revalidate, private Pragma: no-cache Expires: 0 This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/CacheableScanRule.java"
      ],
      "alert_name": "Storable and Cacheable Content",
      "source_url": "https://www.zaproxy.org/docs/alerts/10049-3/",
      "canonical_id": "d2f2a071-3806-5643-a70f-ea33ac140574"
    },
    {
      "alert_id": "43",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "541",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Path_Traversal https://cwe.mitre.org/data/definitions/22.html",
      "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal. Most web sites restrict user access to a specific portion of the file-system, typically called the \u201cweb document root\u201d or \u201cCGI root\u201d directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences. The most basic Path Traversal attack uses the \u201c../\u201d special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \u201c../\u201d sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \u201c..%c0%af\u201d) of the forward slash character, backslash characters (\"..\") on Windows-based servers, URL encoded characters \u201c%2e%2e%2f\u201d), and double URL encoding (\"..%255c\") of the backslash character. Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application\u2019s dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \u201c%00\u201d NULL characters in order to bypass rudimentary file extension checks.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Path_Traversal"
      ],
      "alert_name": "Source Code Disclosure - File Inclusion",
      "source_url": "https://www.zaproxy.org/docs/alerts/43/",
      "canonical_id": "9b1ca89a-1706-59df-910b-f13c4df8d691"
    },
    {
      "alert_id": "10030",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "20",
      "reference": "Scan Rule Help",
      "description": "This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks. For example, an attacker controlling the element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.",
      "remediation": "Force UTF-8 in all charset declarations. If user-input is required to decide a charset declaration, ensure that only an allowed list is used.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/UserControlledCharsetScanRule.java"
      ],
      "alert_name": "User Controllable Charset",
      "source_url": "https://www.zaproxy.org/docs/alerts/10030/",
      "canonical_id": "fce3485e-a826-5c6f-8c76-dd0e5039b40d"
    },
    {
      "alert_id": "20016",
      "alert_type": "Active",
      "status": "beta",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CrossDomainScanRule.java"
      ],
      "alert_name": "Cross-Domain Misconfiguration",
      "source_url": "https://www.zaproxy.org/docs/alerts/20016/",
      "canonical_id": "327823c3-de4d-5f1d-815a-882c5806c8bd"
    },
    {
      "alert_id": "10044",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/BigRedirectsScanRule.java"
      ],
      "alert_name": "Big Redirect Detected (Potential Sensitive Information Leak)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10044/",
      "canonical_id": "4214518d-7429-51dc-93cc-d984bd775c0a"
    },
    {
      "alert_id": "90029",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "",
      "reference": "Scan Rule Help https://www.nds.ruhr-uni-bochum.de/media/nds/veroeffentlichungen/2012/07/11/camera-ready.pdf",
      "description": "Some XML injected code has been interpreted by the server.",
      "remediation": "Use a detailed description of SOAP attributes in the WSDL file.",
      "gitsrc": [
        "https://www.nds.ruhr-uni-bochum.de/media/nds/veroeffentlichungen/2012/07/11/camera-ready.pdf"
      ],
      "alert_name": "SOAP XML Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/90029/",
      "canonical_id": "80d81635-5da6-53ac-b3c5-b71b6b28b8cd"
    },
    {
      "alert_id": "3-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "598",
      "reference": "Scan Rule Help https://seclists.org/webappsec/2002/q4/111",
      "description": "URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.",
      "remediation": "For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InfoSessionIdUrlScanRule.java"
      ],
      "alert_name": "Session ID in URL Rewrite",
      "source_url": "https://www.zaproxy.org/docs/alerts/3-1/",
      "canonical_id": "3ab4adba-1a54-5084-bbbb-7728f52dfaba"
    },
    {
      "alert_id": "40018",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "89",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "SQL injection may be possible.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionScanRule.java"
      ],
      "alert_name": "SQL Injection",
      "source_url": "https://www.zaproxy.org/docs/alerts/40018/",
      "canonical_id": "79029874-c5d3-5b58-a666-dd4dd8f7ca99"
    },
    {
      "alert_id": "90034",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "",
      "reference": "Scan Rule Help https://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/",
      "description": "The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\nAll of these providers provide metadata via an internal unroutable IP address \u2018169.254.169.254\u2019 - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.",
      "remediation": "Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.",
      "gitsrc": [
        "https://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/"
      ],
      "alert_name": "Cloud Metadata Potentially Exposed",
      "source_url": "https://www.zaproxy.org/docs/alerts/90034/",
      "canonical_id": "e353e09c-784e-56f1-8052-d972fe92669e"
    },
    {
      "alert_id": "120000",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/InformationInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - Information in Browser Storage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120000/",
      "canonical_id": "5c547bf8-e496-5967-95db-18f15aef262d"
    },
    {
      "alert_id": "90026",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "",
      "reference": "Scan Rule Help https://www.nds.ruhr-uni-bochum.de/media/nds/veroeffentlichungen/2012/07/11/camera-ready.pdf",
      "description": "An unintended SOAP operation was executed by the server.",
      "remediation": "If not required, the SOAPAction attribute should be disabled. If needed, the operation within the SOAPAction and the SOAP body should always be compared before executing any operation. Any mismatch should be regarded as an attack.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/SOAPActionSpoofingActiveScanRule.java"
      ],
      "alert_name": "SOAP Action Spoofing",
      "source_url": "https://www.zaproxy.org/docs/alerts/90026/",
      "canonical_id": "32c8da0c-49c1-58bb-a855-ee244fcbd8ca"
    },
    {
      "alert_id": "10105-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "326",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
      "description": "HTTP basic or digest authentication has been used over an unsecured connection. The credentials can be read and then reused by someone with access to the network.",
      "remediation": "Protect the connection using HTTPS or use a stronger authentication mechanism.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureAuthenticationScanRule.java"
      ],
      "alert_name": "Weak Authentication Method",
      "source_url": "https://www.zaproxy.org/docs/alerts/10105-2/",
      "canonical_id": "0f970750-64a9-5bd3-a307-422a7bef5749"
    },
    {
      "alert_id": "6-2",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "22",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Path_Traversal https://cwe.mitre.org/data/definitions/22.html",
      "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal. Most web sites restrict user access to a specific portion of the file-system, typically called the \u201cweb document root\u201d or \u201cCGI root\u201d directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences. The most basic Path Traversal attack uses the \u201c../\u201d special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \u201c../\u201d sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \u201c..%c0%af\u201d) of the forward slash character, backslash characters (\"..\") on Windows-based servers, URL encoded characters \u201c%2e%2e%2f\u201d), and double URL encoding (\"..%255c\") of the backslash character. Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application\u2019s dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \u201c%00\u201d NULL characters in order to bypass rudimentary file extension checks.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Path_Traversal"
      ],
      "alert_name": "Path Traversal",
      "source_url": "https://www.zaproxy.org/docs/alerts/6-2/",
      "canonical_id": "86d7a6b8-a3bd-5077-8638-fc1bd32a965e"
    },
    {
      "alert_id": "10048-1",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "78",
      "reference": "Scan Rule Help https://nvd.nist.gov/vuln/detail/CVE-2014-6271 https://www.troyhunt.com/everything-you-need-to-know-about2/",
      "description": "The server is running a version of the Bash shell that allows remote attackers to execute arbitrary code.",
      "remediation": "Update Bash on the server to the latest version.",
      "gitsrc": [
        "https://nvd.nist.gov/vuln/detail/CVE-2014-6271"
      ],
      "alert_name": "Remote Code Execution - Shell Shock",
      "source_url": "https://www.zaproxy.org/docs/alerts/10048-1/",
      "canonical_id": "ca0dffe4-f99c-5ee7-9ac0-288de101763c"
    },
    {
      "alert_id": "120001-1",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "359",
      "reference": "Scan Rule Help",
      "description": "Sensitive Information appears to have been stored in browser localStorage. This can violate PCI and most organizational compliance policies.\nFor more details see the Client tabs - this information was set directly in the browser and will therefore not necessarily appear in this form in any HTTP(S) messages.",
      "remediation": "Do not store sensitive information in browser storage.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/SensitiveInfoInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - Sensitive Information in Browser localStorage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120001-1/",
      "canonical_id": "6a0527b0-5b2e-5ebe-aa4c-4dcf41cbf655"
    },
    {
      "alert_id": "10094-2",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "High",
      "cweid": "642",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/previous-versions/bb386448(v=vs.140) https://www.jardinesoftware.net/2012/02/06/asp-net-tampering-with-event-validation-part-1/",
      "description": "The application does not use a Message Authentication Code (MAC) to protect the integrity of the ASP.NET ViewState, which can be tampered with by a malicious client.",
      "remediation": "Ensure that all ASP.NET ViewStates are protected from tampering, by using a MAC, generated using a secure algorithm, and a secret key on the server side. This is the default configuration on modern ASP.NET installation, by may be over-ridden programmatically, or via the ASP.NET configuration.",
      "gitsrc": [
        "https://learn.microsoft.com/en-us/previous-versions/bb386448%28v=vs.140%29"
      ],
      "alert_name": "ASP.NET ViewState Integrity",
      "source_url": "https://www.zaproxy.org/docs/alerts/10094-2/",
      "canonical_id": "f0d87873-f8ba-550b-a3da-bbc4428cdd69"
    },
    {
      "alert_id": "90002",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Medium",
      "cweid": "502",
      "reference": "Scan Rule Help https://www.oracle.com/java/technologies/javase/seccodeguide.html#8",
      "description": "Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous \u201cRemote Code Execution\u201d. A magic sequence identifying JSO has been detected (Base64: rO0AB, Raw: 0xac, 0xed, 0x00, 0x05).",
      "remediation": "Deserialization of untrusted data is inherently dangerous and should be avoided.",
      "gitsrc": [
        "https://www.oracle.com/java/technologies/javase/seccodeguide.html#8"
      ],
      "alert_name": "Java Serialization Object",
      "source_url": "https://www.zaproxy.org/docs/alerts/90002/",
      "canonical_id": "c00536e7-35a5-551d-a591-fa1ef9b54a21"
    },
    {
      "alert_id": "120001",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/SensitiveInfoInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - Sensitive Information in Browser Storage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120001/",
      "canonical_id": "497eaa9b-5bde-5445-9e9e-d53c1dabc75e"
    },
    {
      "alert_id": "10110",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Low",
      "cweid": "749",
      "reference": "Scan Rule Help https://angular.io/guide/security",
      "description": "A dangerous JS function seems to be in use that would leave the site vulnerable.",
      "remediation": "See the references for security advice on the use of these functions.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/JsFunctionScanRule.java"
      ],
      "alert_name": "Dangerous JS Functions",
      "source_url": "https://www.zaproxy.org/docs/alerts/10110/",
      "canonical_id": "21fc0e16-40fb-5b2f-b307-94b3cc83b85d"
    },
    {
      "alert_id": "40038",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "",
      "reference": "https://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/ https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf https://www.contextis.com/en/blog/server-technologies-reverse-proxy-bypass",
      "description": "Bypassing 403 endpoints may be possible, the scan rule sent a payload that caused the response to be accessible (status code 200).",
      "remediation": "",
      "gitsrc": [
        "https://www.acunetix.com/blog/articles/a-fresh-look-on-reverse-proxy-related-attacks/"
      ],
      "alert_name": "Bypassing 403",
      "source_url": "https://www.zaproxy.org/docs/alerts/40038/",
      "canonical_id": "cd872f0d-a2f8-5042-b7ff-6223b26b7aa1"
    },
    {
      "alert_id": "120002-1",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "Medium",
      "cweid": "922",
      "reference": "Scan Rule Help https://www.zaproxy.org/blog/2020-09-03-zap-jwt-scanner/",
      "description": "JWT was stored in browser localStorage.\nThis is dangerous because data stored in localStorage does not expire. .",
      "remediation": "This is an informational alert and no action is necessary.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/JwtInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - JWT in Browser localStorage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120002-1/",
      "canonical_id": "299f544f-02ee-53ac-b1e9-e96a10d1ec84"
    },
    {
      "alert_id": "100014",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "79",
      "reference": "Scan Rule Help",
      "description": "A reflected parameter value has been found in the HTTP response. Reflected parameter values may introduce XSS vulnerability or HTTP header injection.",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/find_reflected_params.py"
      ],
      "alert_name": "Reflected HTTP GET Parameter(s)",
      "source_url": "https://www.zaproxy.org/docs/alerts/100014/",
      "canonical_id": "84644568-9741-5e07-8b58-27b1ea316184"
    },
    {
      "alert_id": "20019-1",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "601",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/601.html",
      "description": "URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  Use an allow list of approved URLs or domains to be used for redirection.  Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving your site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems when generating the disclaimer page.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  For example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"https://www.example.com/\". Features such as the ESAPI AccessReferenceMap provide this capability.  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ExternalRedirectScanRule.java"
      ],
      "alert_name": "External Redirect",
      "source_url": "https://www.zaproxy.org/docs/alerts/20019-1/",
      "canonical_id": "753d8386-3223-5856-8754-83a27f549fd5"
    },
    {
      "alert_id": "40021",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "89",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "SQL injection may be possible.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionOracleScanRule.java"
      ],
      "alert_name": "SQL Injection - Oracle",
      "source_url": "https://www.zaproxy.org/docs/alerts/40021/",
      "canonical_id": "16983e53-3f76-5ad3-871d-33c203c1dfe7"
    },
    {
      "alert_id": "10028",
      "alert_type": "Passive",
      "status": "release",
      "risk": "High",
      "cweid": "601",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/601.html",
      "description": "Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. https://nottrusted.com ) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks. For example an attacker could supply a user with the following link: https://example.com/example.php?url=https://malicious.example.com .",
      "remediation": "To avoid the open redirect vulnerability, parameters of the application script/program must be validated before sending 302 HTTP code (redirect) to the client browser. Implement safe redirect functionality that only redirects to relative URI's, or a list of trusted domains",
      "gitsrc": [
        "https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html"
      ],
      "alert_name": "Open Redirect",
      "source_url": "https://www.zaproxy.org/docs/alerts/10028/",
      "canonical_id": "fb1b4d9d-9941-57b7-bbb8-698d49d1ef4e"
    },
    {
      "alert_id": "20018",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "20",
      "reference": "Scan Rule Help https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/89.html",
      "description": "Some PHP versions, when configured to run using CGI, do not correctly handle query strings that lack an unescaped \u201c=\u201d character, enabling arbitrary code execution. In this case, an operating system command was caused to be executed on the web server, and the results were returned to the web browser.",
      "remediation": "Upgrade to the latest stable version of PHP, or use the Apache web server and the mod_rewrite module to filter out malicious requests using the \"RewriteCond\" and \"RewriteRule\" directives.",
      "gitsrc": [
        "https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation"
      ],
      "alert_name": "Remote Code Execution - CVE-2012-1823",
      "source_url": "https://www.zaproxy.org/docs/alerts/20018/",
      "canonical_id": "5b721e5b-dd88-5e4e-9002-e1484d56f511"
    },
    {
      "alert_id": "100026",
      "alert_type": "Script Active",
      "status": "alpha",
      "risk": "High",
      "cweid": "347",
      "reference": "Scan Rule Help https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/",
      "description": "The application\u2019s JWT implementation allows for the usage of the \u2019none\u2019 algorithm, which bypasses the JWT hash verification.",
      "remediation": "Use a secure JWT library, and (if your library supports it) restrict the allowed hash algorithms.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/active/JWT%20None%20Exploit.js"
      ],
      "alert_name": "JWT None Exploit",
      "source_url": "https://www.zaproxy.org/docs/alerts/100026/",
      "canonical_id": "9f734893-ca2f-5c7a-9912-7969b628d57a"
    },
    {
      "alert_id": "10052",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "532",
      "reference": "Scan Rule Help https://craig.is/writing/chrome-logger",
      "description": "The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find: server file system locations, vhost declarations, etc.",
      "remediation": "Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.",
      "gitsrc": [
        "https://craig.is/writing/chrome-logger"
      ],
      "alert_name": "X-ChromeLogger-Data (XCOLD) Header Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/10052/",
      "canonical_id": "0702e5ac-2212-5ece-8ccc-e1b70fdaab60"
    },
    {
      "alert_id": "10055-8",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP3/#unsafe-hashes-usage https://content-security-policy.com/examples/allow-inline-style/",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://www.w3.org/TR/CSP3/#unsafe-hashes-usage"
      ],
      "alert_name": "CSP: style-src unsafe-hashes",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-8/",
      "canonical_id": "e2877ea4-678f-58cf-8176-3bf756a5a045"
    },
    {
      "alert_id": "10036-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "497",
      "reference": "Scan Rule Help https://httpd.apache.org/docs/current/mod/core.html#servertokens https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10) https://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "description": "The web/application server is leaking the application it uses as a webserver via the \u201cServer\u201d HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to. This information alone, i.e. without a version string, is not very dangerous for the security of a server, nevertheless this information in the response header field is almost always useless and thus just an obsolete attacking vector.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ServerHeaderInfoLeakScanRule.java"
      ],
      "alert_name": "Server Leaks its Webserver Application via \"Server\" HTTP Response Header Field",
      "source_url": "https://www.zaproxy.org/docs/alerts/10036-1/",
      "canonical_id": "c11b313a-555f-5bf8-8309-f9c14686791d"
    },
    {
      "alert_id": "10097",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "497",
      "reference": "Scan Rule Help https://openwall.info/wiki/john/sample-hashes",
      "description": "A hash was disclosed by the web server. - MD4 / MD5",
      "remediation": "Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/HashDisclosureScanRule.java"
      ],
      "alert_name": "Hash Disclosure - MD4 / MD5",
      "source_url": "https://www.zaproxy.org/docs/alerts/10097/",
      "canonical_id": "53610532-11a5-5f60-8bd3-fb9fac2ce7b1"
    },
    {
      "alert_id": "10019-1",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "345",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)",
      "description": "The Content-Type header was either missing or empty.",
      "remediation": "Ensure each page is setting the specific and appropriate content-type value for the content being delivered.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentTypeMissingScanRule.java"
      ],
      "alert_name": "Content-Type Header Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/10019-1/",
      "canonical_id": "72568cfe-023e-5616-a59f-1a97697f6438"
    },
    {
      "alert_id": "40020",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "89",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "description": "SQL injection may be possible.",
      "remediation": "Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?' If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them. Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality! Do not create dynamic SQL queries using simple string concatenation. Escape all data received from the client. Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input. Apply the principle of least privilege by using the least privileged database user possible. In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact. Grant the minimum database access that is necessary for the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionHypersonicScanRule.java"
      ],
      "alert_name": "SQL Injection - Hypersonic SQL",
      "source_url": "https://www.zaproxy.org/docs/alerts/40020/",
      "canonical_id": "cb952f95-7d8a-5ee3-b22b-82800e2e7a5d"
    },
    {
      "alert_id": "120001-2",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "359",
      "reference": "Scan Rule Help",
      "description": "Sensitive Information appears to have been stored in browser sessionStorage. This can violate PCI and most organizational compliance policies.\nFor more details see the Client tabs - this information was set directly in the browser and will therefore not necessarily appear in this form in any HTTP(S) messages.",
      "remediation": "Do not store sensitive information in browser storage.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/SensitiveInfoInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - Sensitive Information in Browser sessionStorage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120001-2/",
      "canonical_id": "d905d572-97bb-5980-9a39-c4727435fd86"
    },
    {
      "alert_id": "40017",
      "alert_type": "Active",
      "status": "release",
      "risk": "Informational",
      "cweid": "79",
      "reference": "Scan Rule Help",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/PersistentXssSpiderScanRule.java"
      ],
      "alert_name": "Cross Site Scripting (Persistent) - Spider",
      "source_url": "https://www.zaproxy.org/docs/alerts/40017/",
      "canonical_id": "756e5e67-d9c7-50e1-b7c2-40f0278091da"
    },
    {
      "alert_id": "20014",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Informational",
      "cweid": "20",
      "reference": "Scan Rule Help https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution",
      "description": "HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user can compromise the logic of the application to perform either client-side or server-side attacks. One consequence of HPP attacks is that the attacker can potentially override existing hard-coded HTTP parameters to modify the behavior of an application, bypass input validation checkpoints, and access and possibly exploit variables that may be out of direct reach.",
      "remediation": "Properly sanitize the user input for parameter delimiters.",
      "gitsrc": [
        "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution"
      ],
      "alert_name": "HTTP Parameter Pollution",
      "source_url": "https://www.zaproxy.org/docs/alerts/20014/",
      "canonical_id": "b28b57f0-c190-518c-ac4b-3740c7b2f326"
    },
    {
      "alert_id": "10202",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "352",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/352.html",
      "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including:\n* The victim has an active session on the target site.\n* The victim is authenticated via HTTP auth on the target site.\n* The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim\u2019s privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "remediation": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard.  Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.  Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS.  Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS.  Use the ESAPI Session Management control. This control includes a component for CSRF.  Do not use the GET method for any request that triggers a state change.  Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CsrfCountermeasuresScanRule.java"
      ],
      "alert_name": "Absence of Anti-CSRF Tokens",
      "source_url": "https://www.zaproxy.org/docs/alerts/10202/",
      "canonical_id": "f87a42ed-a2d3-50bb-8300-81c02c908c15"
    },
    {
      "alert_id": "40029",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "215",
      "reference": "Scan Rule Help https://msdn.microsoft.com/en-us/library/bb386420.aspx https://msdn.microsoft.com/en-us/library/wwh16c6c.aspx https://www.dotnetperls.com/trace",
      "description": "The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.",
      "remediation": "Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/TraceAxdScanRule.java"
      ],
      "alert_name": "Trace.axd Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/40029/",
      "canonical_id": "d9b20384-3862-5f23-8a4f-48da70edf2ab"
    },
    {
      "alert_id": "50007-1",
      "alert_type": "Tool",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "16",
      "reference": "Scan Rule Help https://spec.graphql.org/October2021/#sec-Introspection",
      "description": "The GraphQL endpoint has Introspection enabled. Introspection allows clients to query the schema and retrieve detailed information about the fields, types, inputs, etc. supported by the GraphQL endpoint. This may be valuable to an attacker, as it could enable them to craft more targeted queries.",
      "remediation": "Disable Introspection on the GraphQL endpoint.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java"
      ],
      "alert_name": "GraphQL Endpoint Supports Introspection",
      "source_url": "https://www.zaproxy.org/docs/alerts/50007-1/",
      "canonical_id": "8497a510-37fd-5c25-aab7-f8b1901fb6d4"
    },
    {
      "alert_id": "10032-6",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Informational",
      "cweid": "642",
      "reference": "Scan Rule Help",
      "description": "This website uses ASP.NET\u2019s Viewstate and its value is split into several chunks.",
      "remediation": "None - the guys running the server may have tuned the configuration as this isn't the default setting.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ViewstateScanRule.java"
      ],
      "alert_name": "Split Viewstate in Use",
      "source_url": "https://www.zaproxy.org/docs/alerts/10032-6/",
      "canonical_id": "32019520-792f-54ac-aebd-fa0b041efd56"
    },
    {
      "alert_id": "10035-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "319",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc6797#section-6.2",
      "description": "A HTTP Strict Transport Security (HSTS) header was found, but it contains the directive max-age=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).",
      "remediation": "Review the configuration of this control. Ensure that your web server, application server, load balancer, etc. is configured to set Strict-Transport-Security with an appropriate max-age value.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/StrictTransportSecurityScanRule.java"
      ],
      "alert_name": "Strict-Transport-Security Disabled",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-2/",
      "canonical_id": "8b09f07b-a1f7-56a1-bf1a-eae1f31ca459"
    },
    {
      "alert_id": "10054",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java"
      ],
      "alert_name": "Cookie without SameSite Attribute",
      "source_url": "https://www.zaproxy.org/docs/alerts/10054/",
      "canonical_id": "bf6d90e5-1727-53ec-b196-9722af7dc108"
    },
    {
      "alert_id": "10105",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureAuthenticationScanRule.java"
      ],
      "alert_name": "Weak Authentication Method",
      "source_url": "https://www.zaproxy.org/docs/alerts/10105/",
      "canonical_id": "d5c14497-160c-5ce7-bc29-36827c9cba77"
    },
    {
      "alert_id": "10019",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentTypeMissingScanRule.java"
      ],
      "alert_name": "Content-Type Header Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/10019/",
      "canonical_id": "d1e97bfd-fd16-5665-baff-dce621938c1f"
    },
    {
      "alert_id": "90023",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "611",
      "reference": "Scan Rule Help https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/611.html",
      "description": "This technique takes advantage of a feature of XML to build documents dynamically at the time of processing. An XML message can either provide data explicitly or by pointing to an URI where the data exists. In the attack technique, external entities may replace the entity value with malicious data, alternate referrals or may compromise the security of the data the server/XML application has access to.\nAttackers may also use External Entities to have the web services server download malicious code or content to the server for use in secondary or follow on attacks.",
      "remediation": "XML External Entities vulnerabilities arise because the application's XML parsing library supports potentially dangerous XML features. To prevent XML External Entities vulnerabilities disable the resolution of external entities and the support for XInclude.",
      "gitsrc": [
        "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_%28XXE%29_Processing"
      ],
      "alert_name": "XML External Entity Attack",
      "source_url": "https://www.zaproxy.org/docs/alerts/90023/",
      "canonical_id": "a826bd8f-0cb0-5eae-8286-b1f75b6f2cdd"
    },
    {
      "alert_id": "10023",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "1295",
      "reference": "Scan Rule Help",
      "description": "The response appeared to contain common error messages returned by platforms such as ASP.NET, and Web-servers such as IIS and Apache. You can configure the list of common debug messages.",
      "remediation": "Disable debugging messages before pushing to production.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InformationDisclosureDebugErrorsScanRule.java"
      ],
      "alert_name": "Information Disclosure - Debug Error Messages",
      "source_url": "https://www.zaproxy.org/docs/alerts/10023/",
      "canonical_id": "1ab6c104-0e56-5c9b-9d50-463bee10436f"
    },
    {
      "alert_id": "100025",
      "alert_type": "Script Active",
      "status": "alpha",
      "risk": "High",
      "cweid": "346",
      "reference": "Scan Rule Help https://tools.ietf.org/html/rfc6455#section-10.2",
      "description": "Server accepted WebSocket connection through HTTP Upgrade request with modified Origin header.",
      "remediation": "Validate Origin header on WebSocket connection handshake, to ensure only specified origins are allowed to connect. Also, WebSocket handshake should use random tokens, similar to anti CSRF tokens.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/active/Cross%20Site%20WebSocket%20Hijacking.js"
      ],
      "alert_name": "Cross-Site WebSocket Hijacking",
      "source_url": "https://www.zaproxy.org/docs/alerts/100025/",
      "canonical_id": "0f8570f7-dbed-57f1-82ca-102e13e8ce8c"
    },
    {
      "alert_id": "10053",
      "alert_type": "Active",
      "status": "deprecated",
      "risk": "Medium",
      "cweid": "400",
      "reference": "https://httpd.apache.org/security/CVE-2011-3192.txt https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2011-3192",
      "description": "The byterange filter in earlier versions of the Apache HTTP Server allows remote attackers to cause a denial of service (memory and CPU exhaustion) via a Range request header that identifies multiple overlapping ranges. This issue was exploited in the wild in August 2011. Deprecated: 2020-06-13 Produced too many false positives and is no longer relevant.",
      "remediation": "Upgrade your Apache server to a currently stable version. Alternative solutions or workarounds are outlined in the references.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/ApacheRangeHeaderDosScanRule.java"
      ],
      "alert_name": "Apache Range Header DoS (CVE-2011-3192)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10053/",
      "canonical_id": "5f729123-0674-5fd3-a5af-28e4db4d9a9d"
    },
    {
      "alert_id": "10103",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Informational",
      "cweid": "200",
      "reference": "Scan Rule Help https://www.veggiespam.com/ils/",
      "description": "The image was found to contain embedded location information, such as GPS coordinates, or another privacy exposure, such as camera serial number.  Depending on the context of the image in the website, this information may expose private details of the users of a site.  For example, a site that allows users to upload profile pictures taken in the home may expose the home\u2019s address.",
      "remediation": "Before allowing images to be stored on the server and/or transmitted to the browser, strip out the embedded location information from image.  This could mean removing all Exif data or just the GPS component.  Other data, like serial numbers, should also be removed.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/imagelocationscanner/src/main/java/org/zaproxy/zap/extension/imagelocationscanner/ImageLocationScanRule.java"
      ],
      "alert_name": "Image Exposes Location or Privacy Data",
      "source_url": "https://www.zaproxy.org/docs/alerts/10103/",
      "canonical_id": "d0813ac2-20d2-5165-b37a-3af4e2a083c9"
    },
    {
      "alert_id": "90003",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Medium",
      "cweid": "345",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity",
      "description": "The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content.",
      "remediation": "Provide a valid integrity attribute to the tag.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SubResourceIntegrityAttributeScanRule.java"
      ],
      "alert_name": "Sub Resource Integrity Attribute Missing",
      "source_url": "https://www.zaproxy.org/docs/alerts/90003/",
      "canonical_id": "0b3a5322-20c8-5484-8d82-89359f3f775b"
    },
    {
      "alert_id": "10017",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "829",
      "reference": "Scan Rule Help",
      "description": "The page includes one or more script files from a third-party domain.",
      "remediation": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CrossDomainScriptInclusionScanRule.java"
      ],
      "alert_name": "Cross-Domain JavaScript Source File Inclusion",
      "source_url": "https://www.zaproxy.org/docs/alerts/10017/",
      "canonical_id": "46d1d3bd-f875-50fd-9d66-5c396b9e911a"
    },
    {
      "alert_id": "10036",
      "alert_type": "Passive",
      "status": "release",
      "risk": "N/A",
      "cweid": "",
      "reference": "",
      "description": "",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ServerHeaderInfoLeakScanRule.java"
      ],
      "alert_name": "HTTP Server Response Header",
      "source_url": "https://www.zaproxy.org/docs/alerts/10036/",
      "canonical_id": "df6601ea-acd1-5532-b728-44c255049070"
    },
    {
      "alert_id": "10101",
      "alert_type": "Tool",
      "status": "alpha",
      "risk": "High",
      "cweid": "287",
      "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/287.html https://cwe.mitre.org/data/definitions/284.html",
      "description": "Insufficient Authentication occurs when a web site permits an attacker to access sensitive content or functionality without having to properly authenticate. Web-based administration tools are a good example of web sites providing access to sensitive functionality. Depending on the specific online resource, these web applications should not be directly accessible without requiring the user to properly verify their identity. To get around setting up authentication, some resources are protected by \u201chiding\u201d the specific location and not linking the location into the main web site or other public places. However, this approach is nothing more than \u201cSecurity Through Obscurity\u201d. It\u2019s important to understand that even though a resource is unknown to an attacker, it still remains accessible directly through a specific URL. The specific URL could be discovered through a Brute Force probing for common file and directory locations (/admin for example), error messages, referrer logs, or documentation such as help files. These resources, whether they are content- or functionality-driven, should be adequately protected.",
      "remediation": "Phase: Architecture and Design Use an authentication framework or library such as the OWASP ESAPI Authentication feature.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/accessControl/src/main/java/org/zaproxy/zap/extension/accessControl/ExtensionAccessControl.java"
      ],
      "alert_name": "Access Control Issue - Improper Authentication",
      "source_url": "https://www.zaproxy.org/docs/alerts/10101/",
      "canonical_id": "d3034401-ddb3-52dd-8713-6c8bfe815925"
    },
    {
      "alert_id": "40023",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Informational",
      "cweid": "204",
      "reference": "Scan Rule Help https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html https://dl.ifip.org/db/conf/sec/sec2011/FreilingS11.pdf https://cwe.mitre.org/data/definitions/204.html",
      "description": "It may be possible to enumerate usernames, based on differing HTTP responses when valid and invalid usernames are provided. This would greatly increase the probability of success of password brute-forcing attacks against the system. Note that false positives may sometimes be minimised by increasing the \u2018Attack Strength\u2019 Option in ZAP. Please manually check the \u2018Other Info\u2019 field to confirm if this is actually an issue.",
      "remediation": "Do not divulge details of whether a username is valid or invalid. In particular, for unsuccessful login attempts, do not differentiate between an invalid user and an invalid password in the error message, page title, page contents, HTTP headers, or redirection logic.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/UsernameEnumerationScanRule.java"
      ],
      "alert_name": "Possible Username Enumeration",
      "source_url": "https://www.zaproxy.org/docs/alerts/40023/",
      "canonical_id": "08f80da2-d748-566f-b7a7-b4c83c0c2f76"
    },
    {
      "alert_id": "40032",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "94",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Learn/Server-side/Apache_Configuration_htaccess https://httpd.apache.org/docs/2.4/howto/htaccess.html",
      "description": "htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer.",
      "remediation": "Ensure the .htaccess file is not accessible.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/HtAccessScanRule.java"
      ],
      "alert_name": ".htaccess Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/40032/",
      "canonical_id": "827442bf-ba1b-5f47-ad22-51011dad427a"
    },
    {
      "alert_id": "110005",
      "alert_type": "WebSocket Passive",
      "status": "release",
      "risk": "High",
      "cweid": "359",
      "reference": "",
      "description": "The response contains Personally Identifiable Information, such as CC number. Credit Card type detected: undefined.",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/websocket/src/main/zapHomeFiles/scripts/templates/websocketpassive/PII%20Disclosure.js"
      ],
      "alert_name": "Personally Identifiable Information via WebSocket",
      "source_url": "https://www.zaproxy.org/docs/alerts/110005/",
      "canonical_id": "2115c030-2ad7-5621-9acc-9328133709c9"
    },
    {
      "alert_id": "10045-2",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "541",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Forced_browsing https://cwe.mitre.org/data/definitions/425.html",
      "description": "A Java class in the /WEB-INF folder disclosed the presence of the properties file. Properties file are not intended to be publicly accessible, and typically contain configuration information, application credentials, or cryptographic keys.",
      "remediation": "The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers. It may also be possible to remove the /WEB-INF folder.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Forced_browsing"
      ],
      "alert_name": "Properties File Disclosure - /WEB-INF folder",
      "source_url": "https://www.zaproxy.org/docs/alerts/10045-2/",
      "canonical_id": "0f10b2c9-76a2-57a0-99db-e20caae9735b"
    },
    {
      "alert_id": "20016-2",
      "alert_type": "Active",
      "status": "beta",
      "risk": "High",
      "cweid": "264",
      "reference": "Scan Rule Help https://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v=vs.95) https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v=vs.95)",
      "description": "Flash/Silverlight based cross-site request forgery may be possible, due to a misconfiguration on the web server.",
      "remediation": "Configure the crossdomain.xml file to restrict the list of domains that are allowed to make cross-domain send (but not necessarily read) requests to this web server, using <allow-http-request-headers-from domain=\"example.com\" headers=\"Authorization,X-Blahh\">. You should only grant access to \"*\" (all domains) if you are certain that this service is not vulnerable to Cross Site Request Forgery (CSRF) attacks.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CrossDomainScanRule.java"
      ],
      "alert_name": "Cross-Domain Misconfiguration - Adobe - Send",
      "source_url": "https://www.zaproxy.org/docs/alerts/20016-2/",
      "canonical_id": "cc769b3f-fe68-5895-9bfe-08f2e7f9694d"
    },
    {
      "alert_id": "10036-2",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "497",
      "reference": "Scan Rule Help https://httpd.apache.org/docs/current/mod/core.html#servertokens https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10) https://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "description": "The web/application server is leaking version information via the \u201cServer\u201d HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ServerHeaderInfoLeakScanRule.java"
      ],
      "alert_name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "source_url": "https://www.zaproxy.org/docs/alerts/10036-2/",
      "canonical_id": "284f8acc-845d-5448-bfad-6a96cde66691"
    },
    {
      "alert_id": "6-5",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "22",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Path_Traversal https://cwe.mitre.org/data/definitions/22.html",
      "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal. Most web sites restrict user access to a specific portion of the file-system, typically called the \u201cweb document root\u201d or \u201cCGI root\u201d directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences. The most basic Path Traversal attack uses the \u201c../\u201d special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \u201c../\u201d sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \u201c..%c0%af\u201d) of the forward slash character, backslash characters (\"..\") on Windows-based servers, URL encoded characters \u201c%2e%2e%2f\u201d), and double URL encoding (\"..%255c\") of the backslash character. Even if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application\u2019s dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \u201c%00\u201d NULL characters in order to bypass rudimentary file extension checks.",
      "remediation": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"  For filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.  Warning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised.   Inputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.  Run your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.  Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Path_Traversal"
      ],
      "alert_name": "Path Traversal",
      "source_url": "https://www.zaproxy.org/docs/alerts/6-5/",
      "canonical_id": "9f700551-0ea7-52ef-8e70-a4d46c5b17fe"
    },
    {
      "alert_id": "40028",
      "alert_type": "Active",
      "status": "release",
      "risk": "Medium",
      "cweid": "94",
      "reference": "Scan Rule Help https://www.troyhunt.com/aspnet-session-hijacking-with-google/ https://www.nuget.org/packages/elmah https://elmah.github.io/",
      "description": "The Error Logging Modules and Handlers (ELMAH [elmah.axd]) HTTP Module was found to be available. This module can leak a significant amount of valuable information.",
      "remediation": "Consider whether or not ELMAH is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization. See also: https://elmah.github.io/a/securing-error-log-pages/",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/ElmahScanRule.java"
      ],
      "alert_name": "ELMAH Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/40028/",
      "canonical_id": "b8a3c646-ef96-5c6b-b4d9-dd104b3ac2f9"
    },
    {
      "alert_id": "10004",
      "alert_type": "Tool",
      "status": "release",
      "risk": "Informational",
      "cweid": "",
      "reference": "Scan Rule Help",
      "description": "The following \u201cWidgets\u201d technology was identified: Example Software.",
      "remediation": "",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/ExtensionWappalyzer.java"
      ],
      "alert_name": "Tech Detection Passive Scanner",
      "source_url": "https://www.zaproxy.org/docs/alerts/10004/",
      "canonical_id": "5ad1057e-ce19-5fc5-9583-3af24bed75a6"
    },
    {
      "alert_id": "10037",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "497",
      "reference": "Scan Rule Help https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework https://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html",
      "description": "The web/application server is leaking information via one or more \u201cX-Powered-By\u201d HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XPoweredByHeaderInfoLeakScanRule.java"
      ],
      "alert_name": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10037/",
      "canonical_id": "1389783e-9db4-5be2-9574-926f397ab5cd"
    },
    {
      "alert_id": "100036",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Low",
      "cweid": "200",
      "reference": "Scan Rule Help",
      "description": "An Amazon S3 bucket URL was found in the HTTP response body.",
      "remediation": "Remove S3 Bucket names from the response or ensure that the permissions in bucket are configured properly.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/s3.js"
      ],
      "alert_name": "Information Disclosure - Amazon S3 Bucket URL",
      "source_url": "https://www.zaproxy.org/docs/alerts/100036/",
      "canonical_id": "1ad40f1f-d2d1-5428-a887-acad7959db6c"
    },
    {
      "alert_id": "10035-3",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "319",
      "reference": "Scan Rule Help https://datatracker.ietf.org/doc/html/rfc6797#section-8.1",
      "description": "HTTP Strict Transport Security (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.\nHTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).",
      "remediation": "Ensure that only one component in your stack: code, web server, application server, load balancer, etc. is configured to set or add a HTTP Strict-Transport-Security (HSTS) header.",
      "gitsrc": [
        "https://datatracker.ietf.org/doc/html/rfc6797#section-8.1"
      ],
      "alert_name": "Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10035-3/",
      "canonical_id": "02c3957d-1a0f-5481-87ca-0b066efb6df0"
    },
    {
      "alert_id": "90004-3",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy",
      "description": "Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.",
      "remediation": "Ensure that the application/web server sets the Cross-Origin-Opener-Policy header appropriately, and that it sets the Cross-Origin-Opener-Policy header to 'same-origin' for documents. 'same-origin-allow-popups' is considered as less secured and should be avoided. If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Opener-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-opener-policy).",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SiteIsolationScanRule.java"
      ],
      "alert_name": "Insufficient Site Isolation Against Spectre Vulnerability",
      "source_url": "https://www.zaproxy.org/docs/alerts/90004-3/",
      "canonical_id": "7dced5e1-0396-52cd-832f-ef65fad0bf43"
    },
    {
      "alert_id": "20012",
      "alert_type": "Active",
      "status": "beta",
      "risk": "Medium",
      "cweid": "352",
      "reference": "Scan Rule Help https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html https://cwe.mitre.org/data/definitions/352.html",
      "description": "A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf. CSRF attacks are effective in a number of situations, including:\n* The victim has an active session on the target site.\n* The victim is authenticated via HTTP auth on the target site.\n* The victim is on the same local network as the target site. CSRF has primarily been used to perform an action against a target site using the victim\u2019s privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
      "remediation": "Phase: Architecture and Design Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, use anti-CSRF packages such as the OWASP CSRFGuard.  Phase: Implementation Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.  Phase: Architecture and Design Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). Note that this can be bypassed using XSS.  Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. Note that this can be bypassed using XSS.  Use the ESAPI Session Management control. This control includes a component for CSRF.  Do not use the GET method for any request that triggers a state change.  Phase: Implementation Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrulesBeta/src/main/java/org/zaproxy/zap/extension/ascanrulesBeta/CsrfTokenScanRule.java"
      ],
      "alert_name": "Anti-CSRF Tokens Check",
      "source_url": "https://www.zaproxy.org/docs/alerts/20012/",
      "canonical_id": "948c6d59-7ba4-500d-9ada-1536e7bad2b4"
    },
    {
      "alert_id": "10056",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Low",
      "cweid": "489",
      "reference": "Scan Rule Help https://symfony.com/doc/current/cookbook/profiler/profiling_data.html https://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api",
      "description": "The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony\u2019s Profiler may be in use and exposing sensitive data.",
      "remediation": "Limit access to Symfony's Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP, etc.).",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/XDebugTokenScanRule.java"
      ],
      "alert_name": "X-Debug-Token Information Leak",
      "source_url": "https://www.zaproxy.org/docs/alerts/10056/",
      "canonical_id": "301c84f1-1737-524a-b76a-4b7c85318852"
    },
    {
      "alert_id": "100006",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "311",
      "reference": "Scan Rule Help https://support.f5.com/kb/en-us/solutions/public/6000/900/sol6917.html",
      "description": "The F5 BIG-IP Persistence cookie set for this website can be decoded to a specific IP and port. An attacker may leverage this information to conduct Social Engineering attacks or other exploits.",
      "remediation": "Configure BIG-IP cookie encryption.",
      "gitsrc": [
        "https://support.f5.com/kb/en-us/solutions/public/6000/900/sol6917.html"
      ],
      "alert_name": "Information Disclosure - IP Exposed via F5 BIG-IP Persistence Cookie",
      "source_url": "https://www.zaproxy.org/docs/alerts/100006/",
      "canonical_id": "49b3d1dc-2d6c-5e3b-8e6a-ecd027182bbf"
    },
    {
      "alert_id": "10055-9",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "693",
      "reference": "Scan Rule Help https://www.w3.org/TR/CSP/ https://caniuse.com/#search=content+security+policy https://content-security-policy.com/ https://github.com/HtmlUnit/htmlunit-csp https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "remediation": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanRule.java"
      ],
      "alert_name": "CSP: Malformed Policy (Non-ASCII)",
      "source_url": "https://www.zaproxy.org/docs/alerts/10055-9/",
      "canonical_id": "92f6bfee-3f79-5ef7-8dc5-7f77bafa7cab"
    },
    {
      "alert_id": "120000-2",
      "alert_type": "Client Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "359",
      "reference": "Scan Rule Help",
      "description": "Information was stored in browser sessionStorage.\nThis is not unusual or necessarily unsafe - this informational alert has been raised to help you get a better understanding of what this app is doing. For more details see the Client tabs - this information was set directly in the browser and will therefore not necessarily appear in this form in any HTTP(S) messages.",
      "remediation": "This is an informational alert and no action is necessary.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/client/src/main/java/org/zaproxy/addon/client/pscan/InformationInStorageScanRule.java"
      ],
      "alert_name": "Information Disclosure - Information in Browser sessionStorage",
      "source_url": "https://www.zaproxy.org/docs/alerts/120000-2/",
      "canonical_id": "3e795eed-a928-574d-b0c1-281bddc93f02"
    },
    {
      "alert_id": "10041",
      "alert_type": "Passive",
      "status": "release",
      "risk": "Medium",
      "cweid": "319",
      "reference": "Scan Rule Help",
      "description": "This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through MITM and the secure HTTPS form can be replaced or spoofed.",
      "remediation": "Use HTTPS for landing pages that host secure forms.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/InsecureFormLoadScanRule.java"
      ],
      "alert_name": "HTTP to HTTPS Insecure Transition in Form Post",
      "source_url": "https://www.zaproxy.org/docs/alerts/10041/",
      "canonical_id": "d53e7382-f913-503e-a7ef-ea154b5bf664"
    },
    {
      "alert_id": "10045-1",
      "alert_type": "Active",
      "status": "release",
      "risk": "High",
      "cweid": "541",
      "reference": "Scan Rule Help https://owasp.org/www-community/attacks/Forced_browsing https://cwe.mitre.org/data/definitions/425.html",
      "description": "Java source code was disclosed by the web server in Java class files in the WEB-INF folder. The class files can be dis-assembled to produce source code which very closely matches the original source code.",
      "remediation": "The web server should be configured to not serve the /WEB-INF folder or its contents to web browsers, since it contains sensitive information such as compiled Java source code and properties files which may contain credentials. Java classes deployed with the application should be obfuscated, as an additional layer of defence in a \"defence-in-depth\" approach.",
      "gitsrc": [
        "https://owasp.org/www-community/attacks/Forced_browsing"
      ],
      "alert_name": "Source Code Disclosure - /WEB-INF Folder",
      "source_url": "https://www.zaproxy.org/docs/alerts/10045-1/",
      "canonical_id": "44cbe4d1-6aef-58aa-87a2-1ded007c6390"
    },
    {
      "alert_id": "100007",
      "alert_type": "Script Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "311",
      "reference": "Scan Rule Help",
      "description": "A Base64-encoded string has been found in the HTTP response body. Base64-encoded data may contain sensitive information such as usernames, passwords or cookies which should be further inspected.",
      "remediation": "Base64-encoding should not be used to store or send sensitive information.",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/passive/find%20base64%20strings.js"
      ],
      "alert_name": "Information Disclosure - Base64-encoded String",
      "source_url": "https://www.zaproxy.org/docs/alerts/100007/",
      "canonical_id": "6082ace6-74ea-5a7f-8f68-46fe28d220f6"
    },
    {
      "alert_id": "90004-2",
      "alert_type": "Passive",
      "status": "beta",
      "risk": "Low",
      "cweid": "693",
      "reference": "Scan Rule Help https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy",
      "description": "Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don\u2019t explicitly grant the document permission (using CORP or CORS).",
      "remediation": "Ensure that the application/web server sets the Cross-Origin-Embedder-Policy header appropriately, and that it sets the Cross-Origin-Embedder-Policy header to 'require-corp' for documents. If possible, ensure that the end user uses a standards-compliant and modern web browser that supports the Cross-Origin-Embedder-Policy header (https://caniuse.com/mdn-http_headers_cross-origin-embedder-policy).",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/SiteIsolationScanRule.java"
      ],
      "alert_name": "Insufficient Site Isolation Against Spectre Vulnerability",
      "source_url": "https://www.zaproxy.org/docs/alerts/90004-2/",
      "canonical_id": "3d59e58f-232c-5c0e-82d7-1db88ca61b5a"
    },
    {
      "alert_id": "100029",
      "alert_type": "Script Active",
      "status": "alpha",
      "risk": "High",
      "cweid": "74",
      "reference": "Scan Rule Help https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5418 https://github.com/mpgn/CVE-2019-5418",
      "description": "The application seems to be subject to CVE-2019-5418. By sending a specially crafted request it was possible to have the target return data from the server file system.",
      "remediation": "Upgrade to a version of Ruby/Rails where this issue is fixed. (See references for further details).",
      "gitsrc": [
        "https://github.com/zaproxy/community-scripts/blob/main/active/cve-2019-5418.js"
      ],
      "alert_name": "File Content Disclosure (CVE-2019-5418)",
      "source_url": "https://www.zaproxy.org/docs/alerts/100029/",
      "canonical_id": "8c4669dd-d85a-5576-a1b8-15b4be3ce4ee"
    },
    {
      "alert_id": "10094-1",
      "alert_type": "Passive",
      "status": "alpha",
      "risk": "Informational",
      "cweid": "200",
      "reference": "Scan Rule Help https://learn.microsoft.com/en-us/previous-versions/bb386448(v=vs.140) https://projects.webappsec.org/w/page/13246936/Information%20Leakage",
      "description": "An ASP.NET ViewState was disclosed by the application/web server.",
      "remediation": "Manually confirm that the ASP.NET ViewState does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.",
      "gitsrc": [
        "https://github.com/zaproxy/zap-extensions/blob/main/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java"
      ],
      "alert_name": "ASP.NET ViewState Disclosure",
      "source_url": "https://www.zaproxy.org/docs/alerts/10094-1/",
      "canonical_id": "b91ae594-e22e-55fa-b2e0-fffcf1cde01d"
    }
  ]
}